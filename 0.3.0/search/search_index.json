{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home The kintone API SDK for ios includes various features that are useful for calling the API on the server side. Getting Started Quickstart Reference Authentication Connection Record Cursor BulkRequest App KintoneAPIException File Model App App App AppDeployStatus Form Field Input Lookup Input Member Selection Time Layout General View Record Cursor Record Cursor CreateRecordCursorResponse GetRecordCursorResponse File Bulk Request License MIT Copyright Copyright(c) Cybozu, Inc.","title":"Home"},{"location":"#home","text":"The kintone API SDK for ios includes various features that are useful for calling the API on the server side.","title":"Home"},{"location":"#getting-started","text":"Quickstart","title":"Getting Started"},{"location":"#reference","text":"Authentication Connection Record Cursor BulkRequest App KintoneAPIException File Model App App App AppDeployStatus Form Field Input Lookup Input Member Selection Time Layout General View Record Cursor Record Cursor CreateRecordCursorResponse GetRecordCursorResponse File Bulk Request","title":"Reference"},{"location":"#license","text":"MIT","title":"License"},{"location":"#copyright","text":"Copyright(c) Cybozu, Inc.","title":"Copyright"},{"location":"getting-started/quickstart/","text":"Quickstart Requirement kintone-ios-sdk promises Following below steps Create a new project Install kintone iOS SDK packages Install SDK by Carthage Get Carthage by running the bellow command or choose another installation method brew install carthage Create Cartfile into the ./testSDK folder github \"google/promises\" github \"kintone/kintone-ios-sdk\" Run carthage update On your application targets\u2019 General settings tab, in the Embedded Binaries section, add Item FBLPromises.framework Promises.framework kintone_ios_sdk.framework Install SDK by Cocoapods Get Cocoapods by running the bellow command or choose another installation method sudo gem install cocoapods Create Podfile by command line in sample application folder pod init Add depedency packages into Podfile vi Podfile Modify Podfile target 'testSDK' do use_frameworks! pod 'PromisesSwift' pod 'kintone-ios-sdk' # Pods for testSDK end Run pod install On your ./testSDK folder, double click on testSDK.xcworkspace file to start implementing Implement sample application using kintone iOS SDK Build the UI elements Connect the UI elements Open the ViewController.swift Declare framework import UIKit import kintone_ios_sdk import Promises Init SDK module let auth:Auth = Auth() var conn:Connection? = nil var app:App? = nil Get attribute string func getAttributedString(_ htmlString: String) -> NSAttributedString { let htmlData = NSString(string: htmlString).data(using: String.Encoding.unicode.rawValue) let options = [NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html] let attributedString = try! NSAttributedString(data: htmlData!, options: options, documentAttributes: nil) return attributedString } Implement getApp function auth.setPasswordAuth(txtUserName.text!, txtPassword.text!) conn = Connection(txtDomain.text!, auth) print(\"domain \\(txtDomain.text!)\") app = App(conn) self.app?.getApp(Int(txtAppID.text!)!).then{ response in let htmlString = \"<html>\" + \"<head></head>\" + \"<body><h1>App Infor</h1>\" + \"<b>App ID: \\(response.getAppId()!)</b></br>\" + \"<b>App Name: \\(response.getName()!)</b></br>\" + \"<b>Creared At: \\(response.getCreadtedAt()!)</b></br>\" + \"<b>Creared By: \\(response.getCreator()!.getName()!)</b></br>\" + \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } }.catch { error in var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" if type(of: error) == KintoneAPIException.self { let err = error as! KintoneAPIException htmlString += \"<b>Status code: \\(err.getHttpErrorCode()!)</b>\" + \"<p><b>Message: \\(err.getErrorResponse()!.getMessage()!)</b></p>\" } else { htmlString += \"<p><b>Message: \\(error.localizedDescription)</b></p>\" } htmlString += \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } } Validate input value from user func isFieldsValid() -> (Bool, String) { var errorString: String = \"\" var isValid: Bool = true if(txtDomain.text!.isEmpty) { isValid = false errorString = \"Please input domain field\" return (isValid, errorString) } if(txtUserName.text!.isEmpty) { isValid = false errorString = \"Please input username field\" return (isValid, errorString) } if(txtPassword.text!.isEmpty) { isValid = false errorString = \"Please input Password field\" return (isValid, errorString) } if(txtAppID.text!.isEmpty) { isValid = false errorString = \"Please input app ID field\" return (isValid, errorString) } return (isValid, \"\") } Add these validation snippet codes in getApp function let (isValid, errorString) = self.isFieldsValid() if(!isValid){ DispatchQueue.main.async { var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" htmlString += \"<p><b>Message: \\(errorString)</b></p>\" htmlString += \"</body></head></html>\" self.txtResult.attributedText = self.getAttributedString(htmlString) } return } Set the promises of dispatch queue to global in the AppDelegate.swift. (Reference: Default dispatch queue ) FullCode ViewController Class import UIKit import kintone_ios_sdk import Promises class ViewController: UIViewController { @IBOutlet weak var txtDomain: UITextField! @IBOutlet weak var txtPassword: UITextField! @IBOutlet weak var txtUserName: UITextField! @IBOutlet weak var txtAppID: UITextField! @IBOutlet weak var txtResult: UITextView! let auth:Auth = Auth.init() var conn:Connection? = nil var app:App? = nil override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } @IBAction func getApp(_ sender: Any) { let (isValid, errorString) = self.isFieldsValid() if(!isValid){ DispatchQueue.main.async { var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" htmlString += \"<p><b>Message: \\(errorString)</b></p>\" htmlString += \"</body></head></html>\" self.txtResult.attributedText = self.getAttributedString(htmlString) } return } auth.setPasswordAuth(txtUserName.text!, txtPassword.text!) conn = Connection(txtDomain.text!, auth) app = App(conn) self.app?.getApp(Int(txtAppID.text!)!).then{ response in let htmlString = \"<html>\" + \"<head></head>\" + \"<body><h1>App Infor</h1>\" + \"<b>App ID: \\(response.getAppId()!)</b></br>\" + \"<b>App Name: \\(response.getName()!)</b></br>\" + \"<b>Creared At: \\(response.getCreadtedAt()!)</b></br>\" + \"<b>Creared By: \\(response.getCreator()!.getName()!)</b></br>\" + \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } }.catch { error in var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" if type(of: error) == KintoneAPIException.self { let err = error as! KintoneAPIException htmlString += \"<b>Status code: \\(err.getHttpErrorCode()!)</b>\" + \"<p><b>Message: \\(err.getErrorResponse()!.getMessage()!)</b></p>\" } else { htmlString += \"<p><b>Message: \\(error.localizedDescription)</b></p>\" } htmlString += \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } } } func isFieldsValid() -> (Bool, String) { var errorString: String = \"\" var isValid: Bool = true if(txtDomain.text!.isEmpty) { isValid = false errorString = \"Please input domain field\" return (isValid, errorString) } if(txtUserName.text!.isEmpty) { isValid = false errorString = \"Please input username field\" return (isValid, errorString) } if(txtPassword.text!.isEmpty) { isValid = false errorString = \"Please input Password field\" return (isValid, errorString) } if(txtAppID.text!.isEmpty) { isValid = false errorString = \"Please input app ID field\" return (isValid, errorString) } return (isValid, \"\") } func getAttributedString(_ htmlString: String) -> NSAttributedString { let htmlData = NSString(string: htmlString).data(using: String.Encoding.unicode.rawValue) let options = [NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html] let attributedString = try! NSAttributedString(data: htmlData!, options: options, documentAttributes: nil) return attributedString } } Run The App Build and run the iOS App. After inserting the domain data, credentials and the target Kintone App ID, click on the Get App button. The iOS App should retrieve the infomation of the specified Kintone App, and display it in the text view.","title":"Quickstart"},{"location":"getting-started/quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"getting-started/quickstart/#requirement","text":"kintone-ios-sdk promises","title":"Requirement"},{"location":"getting-started/quickstart/#following-below-steps","text":"","title":"Following below steps"},{"location":"getting-started/quickstart/#create-a-new-project","text":"","title":"Create a new project"},{"location":"getting-started/quickstart/#install-kintone-ios-sdk-packages","text":"","title":"Install kintone iOS SDK packages"},{"location":"getting-started/quickstart/#install-sdk-by-carthage","text":"Get Carthage by running the bellow command or choose another installation method brew install carthage Create Cartfile into the ./testSDK folder github \"google/promises\" github \"kintone/kintone-ios-sdk\" Run carthage update On your application targets\u2019 General settings tab, in the Embedded Binaries section, add Item FBLPromises.framework Promises.framework kintone_ios_sdk.framework","title":"Install SDK by Carthage"},{"location":"getting-started/quickstart/#install-sdk-by-cocoapods","text":"Get Cocoapods by running the bellow command or choose another installation method sudo gem install cocoapods Create Podfile by command line in sample application folder pod init Add depedency packages into Podfile vi Podfile Modify Podfile target 'testSDK' do use_frameworks! pod 'PromisesSwift' pod 'kintone-ios-sdk' # Pods for testSDK end Run pod install On your ./testSDK folder, double click on testSDK.xcworkspace file to start implementing","title":"Install SDK by Cocoapods"},{"location":"getting-started/quickstart/#implement-sample-application-using-kintone-ios-sdk","text":"Build the UI elements Connect the UI elements Open the ViewController.swift Declare framework import UIKit import kintone_ios_sdk import Promises Init SDK module let auth:Auth = Auth() var conn:Connection? = nil var app:App? = nil Get attribute string func getAttributedString(_ htmlString: String) -> NSAttributedString { let htmlData = NSString(string: htmlString).data(using: String.Encoding.unicode.rawValue) let options = [NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html] let attributedString = try! NSAttributedString(data: htmlData!, options: options, documentAttributes: nil) return attributedString } Implement getApp function auth.setPasswordAuth(txtUserName.text!, txtPassword.text!) conn = Connection(txtDomain.text!, auth) print(\"domain \\(txtDomain.text!)\") app = App(conn) self.app?.getApp(Int(txtAppID.text!)!).then{ response in let htmlString = \"<html>\" + \"<head></head>\" + \"<body><h1>App Infor</h1>\" + \"<b>App ID: \\(response.getAppId()!)</b></br>\" + \"<b>App Name: \\(response.getName()!)</b></br>\" + \"<b>Creared At: \\(response.getCreadtedAt()!)</b></br>\" + \"<b>Creared By: \\(response.getCreator()!.getName()!)</b></br>\" + \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } }.catch { error in var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" if type(of: error) == KintoneAPIException.self { let err = error as! KintoneAPIException htmlString += \"<b>Status code: \\(err.getHttpErrorCode()!)</b>\" + \"<p><b>Message: \\(err.getErrorResponse()!.getMessage()!)</b></p>\" } else { htmlString += \"<p><b>Message: \\(error.localizedDescription)</b></p>\" } htmlString += \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } } Validate input value from user func isFieldsValid() -> (Bool, String) { var errorString: String = \"\" var isValid: Bool = true if(txtDomain.text!.isEmpty) { isValid = false errorString = \"Please input domain field\" return (isValid, errorString) } if(txtUserName.text!.isEmpty) { isValid = false errorString = \"Please input username field\" return (isValid, errorString) } if(txtPassword.text!.isEmpty) { isValid = false errorString = \"Please input Password field\" return (isValid, errorString) } if(txtAppID.text!.isEmpty) { isValid = false errorString = \"Please input app ID field\" return (isValid, errorString) } return (isValid, \"\") } Add these validation snippet codes in getApp function let (isValid, errorString) = self.isFieldsValid() if(!isValid){ DispatchQueue.main.async { var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" htmlString += \"<p><b>Message: \\(errorString)</b></p>\" htmlString += \"</body></head></html>\" self.txtResult.attributedText = self.getAttributedString(htmlString) } return } Set the promises of dispatch queue to global in the AppDelegate.swift. (Reference: Default dispatch queue ) FullCode ViewController Class import UIKit import kintone_ios_sdk import Promises class ViewController: UIViewController { @IBOutlet weak var txtDomain: UITextField! @IBOutlet weak var txtPassword: UITextField! @IBOutlet weak var txtUserName: UITextField! @IBOutlet weak var txtAppID: UITextField! @IBOutlet weak var txtResult: UITextView! let auth:Auth = Auth.init() var conn:Connection? = nil var app:App? = nil override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } @IBAction func getApp(_ sender: Any) { let (isValid, errorString) = self.isFieldsValid() if(!isValid){ DispatchQueue.main.async { var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" htmlString += \"<p><b>Message: \\(errorString)</b></p>\" htmlString += \"</body></head></html>\" self.txtResult.attributedText = self.getAttributedString(htmlString) } return } auth.setPasswordAuth(txtUserName.text!, txtPassword.text!) conn = Connection(txtDomain.text!, auth) app = App(conn) self.app?.getApp(Int(txtAppID.text!)!).then{ response in let htmlString = \"<html>\" + \"<head></head>\" + \"<body><h1>App Infor</h1>\" + \"<b>App ID: \\(response.getAppId()!)</b></br>\" + \"<b>App Name: \\(response.getName()!)</b></br>\" + \"<b>Creared At: \\(response.getCreadtedAt()!)</b></br>\" + \"<b>Creared By: \\(response.getCreator()!.getName()!)</b></br>\" + \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } }.catch { error in var htmlString = \"<html><head></head><body><h1>Error occur</h1>\" if type(of: error) == KintoneAPIException.self { let err = error as! KintoneAPIException htmlString += \"<b>Status code: \\(err.getHttpErrorCode()!)</b>\" + \"<p><b>Message: \\(err.getErrorResponse()!.getMessage()!)</b></p>\" } else { htmlString += \"<p><b>Message: \\(error.localizedDescription)</b></p>\" } htmlString += \"</body></head></html>\" DispatchQueue.main.async { self.txtResult.attributedText = self.getAttributedString(htmlString) } } } func isFieldsValid() -> (Bool, String) { var errorString: String = \"\" var isValid: Bool = true if(txtDomain.text!.isEmpty) { isValid = false errorString = \"Please input domain field\" return (isValid, errorString) } if(txtUserName.text!.isEmpty) { isValid = false errorString = \"Please input username field\" return (isValid, errorString) } if(txtPassword.text!.isEmpty) { isValid = false errorString = \"Please input Password field\" return (isValid, errorString) } if(txtAppID.text!.isEmpty) { isValid = false errorString = \"Please input app ID field\" return (isValid, errorString) } return (isValid, \"\") } func getAttributedString(_ htmlString: String) -> NSAttributedString { let htmlData = NSString(string: htmlString).data(using: String.Encoding.unicode.rawValue) let options = [NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html] let attributedString = try! NSAttributedString(data: htmlData!, options: options, documentAttributes: nil) return attributedString } }","title":"Implement sample application using kintone iOS SDK"},{"location":"getting-started/quickstart/#run-the-app","text":"Build and run the iOS App. After inserting the domain data, credentials and the target Kintone App ID, click on the Get App button. The iOS App should retrieve the infomation of the specified Kintone App, and display it in the text view.","title":"Run The App"},{"location":"reference/app/","text":"App Gets general information of an App, including the name, description, related Space, creator, and updater information. Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global() Permissions to view the App is needed. API Tokens cannot be used with this API. Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init app module Source code // Init authentication var kintoneAuth = Auth() // Password Authentication let username = \"your_usernamr\" let password = \"your_password\" kintoneAuth = kintoneAuth.setPasswordAuth(username, password) let connection = Connection( \"your_domain\", kintoneAuth ) let app = App(connection) Methods getApp Get the single app Declaration func getApp(_ appId: Int) -> Promise<AppModel> Parameter Name Type Required Description appId Integer yes The kintone app ID Return Promise< AppModel > Sample code get App Source code let appId: Int = {your_app_id} app.getApp(appId).then{response in print(\"appId : \\(response.getAppId()!)\") print(\"spaceId : \\(response.getSpaceId())\" ) print(\"threadId : \\(response.getThreadId())\" ) print(\"name : \\(response.getName()!)\") print(\"description : \\(response.getDescription()!)\") print(\"----------------\") }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getApps Get multiple apps Declaration func getApps(_ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code Get Apps Source code app.getApps().then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getAppsByIDs Get multiple apps by the list of ids Declaration func getAppsByIDs(_ ids: [Int]?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description ids List<Integer> yes The array of app ids offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code get Apps By IDs Source code var appIds: [Int] = [{your_app_id}, {your_app_id}] let limit: Int = {your_limit} let offset : Int = {your_offset} app.getAppsByIDs(appIds, limit, offset).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getAppsByCodes Get multiple apps by a list of codes Declaration func getAppsByCodes(_ codes: [String]?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description codes List<String> yes The array of app codes offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code get Apps By Codes Source code var appCode: [String] = [{your_app_code}, {your_app_code}] let limit: Int = {your_limit} let offset: Int = {your_offset} app.getAppsByCodes(appCode, limit, offset).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"appCode : \\(appInfo.getCode()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getAppsByName Get multiple apps by name Declaration func getAppsByName(_ name: String?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description name String yes The app name offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code get Apps By Name Source code let appName: String = {your_app_name} let limit: Int = {your_limit} let offset: Int = {your_offset} app.getAppsByName(appName, limit, offset).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"appCode : \\(appInfo.getCode()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getAppsBySpaceIDs Get multiple apps by space id Declaration func getAppsBySpaceIDs(_ spaceIds: [Int]?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description spaceIds Array (optional) The Space ID of where the App resides in. Up to 100 IDs can be specified. offset Integer (optional) The number of retrievals that will be skipped. Must be between 0 and 2147483647. If nothing is specified, it will default to 0. limit Integer (optional) The maximum number of the apps to retrieve. Must be between 1 and 100. If nothing is specified, it will default to 100. Return Promise< Array< AppModel >> Sample code get Apps By SpaceIDs Source code let spaceIds: [Int] = [{your_space_id}, {your_space_id}] let limit = {your_litmit} let offset = {your_offset} app.getAppsBySpaceIDs(spaceIds, offset, limit).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } addPreviewApp Creates a preview App. Declaration func addPreviewApp(_ name: String, _ space: Int?, _ thread: Int?) -> Promise<PreviewApp> Parameter Name Type Required Description name String yes The App name. The maximum length is 64 characters. space Integer (optional) The Space ID of where the App will be created. thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise< PreviewApp > Sample code add PreviewApp Source code let spaceId = {your_space_id} // Space will add this app let threadId = {your_thread_id} // Thread will add this app app.addPreviewApp(appName, spaceId, threadId).then{ addPreviewRespones in print(addPreviewRespones?.getApp()) print(addPreviewRespones?.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } deployAppSettings Updates the settings of a pre-live App to the live App. Declaration func deployAppSettings(_ apps: Array<PreviewApp>, _ revert: Bool?) -> Promise<Void> Parameter Name Type Required Description apps Array yes The list of Apps to deploy the pre-live settings to the live Apps. The Maximum limit is 300. If Apps are being deployed to Guest Spaces, Apps can only be deployed to the same Guest Space.. revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise <Void> Sample code deploy AppSettings Source code let appId: Int = {your_app_id} let revision: Int = {your_revision} // Revision of application to deploy let appPreview: PreviewApp? = PreviewApp(appId, revision) app.deployAppSettings([appPreview!]).catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getAppDeployStatus Updates the settings of a pre-live App to the live App. Declaration func getAppDeployStatus(_ apps: [Int]) -> Promise<GetAppDeployStatusResponse> Parameter Name Type Required Description apps Array yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise< GetAppDeployStatusResponse > Sample code get App DeployStatus Source code let appIds: [Int] = [{your_app_id}, {your_app_id}] app.getAppDeployStatus(appIds).then{deployStatusReponse in let listAppsDeployStatus = deployStatusReponse?.getApps() for appDeployStatus in listAppsDeployStatus! { print(appDeployStatus.getApp()) print(appDeployStatus.getStatus()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getFormFields Get field of the form in the kintone app Declaration func getFormFields(_ app: Int, _ lang: LanguageSetting?,_ isPreview: Bool?) -> Promise<FormFields> Parameter Name Type Required Description appId Integer yes The app ID lang LanguageSetting (optional) The language code. Support: DEFAULT: Default language setting of system JA: Japanese language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise< FormFields > Sample code get FormFields Source code let appId: Int = {your_app_id} // Integer let lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA app.getFormFields(appId, lang).then{ formFieldsResponse in print(formFieldsResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) form fields let appId: Int = {your_app_id} // Integer let lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA let isPreview: Bool = true self.app?.getFormFields(appId, lang, isPreview).then{ formFieldsResponse in print(formFieldsResponse) // FormFields Object }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } addFormFields Adds fields to a form of an App. Declaration func addFormFields(_ app: Int, _ fields: [String: Field],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description appId Integer yes The app ID fields [String: Field] (optional) The formFields which will add to form of kintone app Note: [String: Field]: Key: The field code of field on kintone app Value: The field settings of form field on kintone app revision Boolean (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code add FormFields Source code let appId: Int = {your_app_id} // App Id let fieldCode: String = {field_code_string} // Field code of new Field. It must be not as same as any fields in Pre-Live App Setttings let revision: Int = {latest_revision_of_the_settings} // Integer // Create Radio field instance and set properties let addNewField = RadioButtonField(fieldCode) var optionArray = [String: OptionData]() optionArray[\"1\"] = OptionData(\"1\",\"1\") optionArray[\"2\"] = OptionData(\"2\",\"2\") optionArray[\"3\"] = OptionData(\"3\",\"3\") addNewField.setOptions(optionArray) addNewField.setNoLabel(false) addNewField.setRequired(true) addNewField.setLabel(\"Label Radio\") addNewField.setAlign(AlignLayout.VERTICAL) // Add Field object into dictionary with key is Field Code var properties = [String: Field]() properties[fieldCode] = addNewField // Another add field here app.addFormFields(self.APP_ID, properties, revision).then{ basicResponse in print(basicResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateFormFields Updates the field settings of fields in a form of an App. Declaration func updateFormFields(_ app: Int, _ fields: [String: Field],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer yes The app ID fields [String: Field] (optional) The formFields which will add to form of kintone app Note: [String: Field]: Key: The field code of field on kintone app Value: The field settings of form field on kintone app revision Boolean (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code update FormFields Source code let appId: Int = {your_app_id} // Integer let fieldCode: String = {field_code_string} // String | fieldCode of exist fields in Pre-Live App Setttings let revision: Int = {latest_revision_of_the_settings} // Integer // Create Field Object to Update let updateField = SingleLineTextField(fieldCode) updateField.setDefaultValue(\"Hello Kintone\") updateField.setRequired(true) // Add Update Field object into dictionary with key is Field Code var properties = [String: Field]() properties[fieldCode] = updateField app.updateFormFields(appId, properties, revision).then{ basicResponse in print(basicResponse) // BasicResponse { revision : } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } deleteFormFields Deletes fields from a form of an App. Declaration func deleteFormFields(_ app: Int, _ fields: [String],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer yes The app ID fields Array<String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code delete FormFields Source code let appId: Int = {your_app_id} // Integer let fieldCodeArray: [String] = [{field_code_string}] // Array | Array of fieldCodes of exist fields in Pre-Live App Setttings let revision: Int = {latest_revision_of_the_settings} // Integer app.deleteFormFields(appId, fieldCodeArray, revision).then{ basicResponse in print(basicResponse) // BasicResponse { revision : } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getFormLayout Get the layout of form in kintone app Declaration func getFormLayout(_ app: Int, _ isPreview: Bool?) -> Promise<FormLayout> Parameter Name Type Required Description app Integer yes The kintone app id isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise< FormLayout > Sample code get FormLayout Source code let appId: Int = {your_app_id} // Integer app.getFormLayout(appId).then{ formLayoutResponse in print(response_layout.getLayout()!) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) form fields let appId: Int = {your_app_id} // Integer let isPreview: Bool = true app.getFormLayout(appId, isPreview).then{ formLayoutResponse in print(response_layout.getLayout()!) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateFormLayout Updates the field layout info of a form in an App. Declaration func updateFormLayout(_ app: Int, _ layout: [ItemLayout],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer The kintone app id layout Array<ItemLayout> yes A list of field layouts for each row. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code update FormLayout Source code let appId: Int = {your_app_id} // Integer var itemLayoutRequest: [ItemLayout]? = [ItemLayout]() // Row Layout let rowLayout1: RowLayout? = RowLayout() var fieldsRowLayout1: [FieldLayout]? = [FieldLayout]() let singleFieldRowLayout1: FieldLayout? = FieldLayout() singleFieldRowLayout1?.setCode(\"Text\") singleFieldRowLayout1?.setType(FieldType.SINGLE_LINE_TEXT.rawValue) let singleFieldSizeRowLayout1: FieldSize? = FieldSize() singleFieldSizeRowLayout1?.setWidth(\"193\") singleFieldRowLayout1?.setSize(singleFieldSizeRowLayout1) fieldsRowLayout1?.append(singleFieldRowLayout1!) let richTextFieldRowLayout1: FieldLayout? = FieldLayout() richTextFieldRowLayout1?.setCode(\"Rich_text\") richTextFieldRowLayout1?.setType(FieldType.RICH_TEXT.rawValue) let richTextFieldSizeRowLayout1: FieldSize? = FieldSize() richTextFieldSizeRowLayout1?.setWidth(\"315\") richTextFieldSizeRowLayout1?.setInnerHeight(\"125\") richTextFieldRowLayout1?.setSize(richTextFieldSizeRowLayout1) fieldsRowLayout1?.append(richTextFieldRowLayout1!) rowLayout1?.setFields(fieldsRowLayout1) // Subtable Layout let subTableLayout: SubTableLayout? = SubTableLayout() var fieldSubTableLayout: [FieldLayout]? = [FieldLayout]() let singleFieldSubTableLayout1: FieldLayout? = FieldLayout() singleFieldSubTableLayout1?.setCode(\"Text_0\") singleFieldSubTableLayout1?.setType(FieldType.SINGLE_LINE_TEXT.rawValue) let singleFieldSizeSubTableLayout1: FieldSize? = FieldSize() singleFieldSizeSubTableLayout1?.setWidth(\"193\") singleFieldSubTableLayout1?.setSize(singleFieldSizeSubTableLayout1) fieldSubTableLayout?.append(singleFieldSubTableLayout1!) subTableLayout?.setFields(fieldSubTableLayout) subTableLayout?.setCode(\"Table\") // GROUP Layout let groupLayout: GroupLayout? = GroupLayout() var rowLayoutInGroup: [RowLayout]? = [RowLayout]() // Row Layout let firstRowLayoutInGroup: RowLayout? = RowLayout() var fieldsInRowLayoutInGroup: [FieldLayout]? = [FieldLayout]() // Numeric Field Layout let numericFieldInRowLayoutInGroup: FieldLayout? = FieldLayout() numericFieldInRowLayoutInGroup?.setCode(\"Number\") numericFieldInRowLayoutInGroup?.setType(FieldType.NUMBER.rawValue) // field size let numericFieldSizeInRowLayoutInGroup: FieldSize? = FieldSize() numericFieldSizeInRowLayoutInGroup?.setWidth(\"200\") numericFieldInRowLayoutInGroup?.setSize(numericFieldSizeInRowLayoutInGroup) fieldsInRowLayoutInGroup?.append(numericFieldInRowLayoutInGroup!) firstRowLayoutInGroup?.setFields(fieldsInRowLayoutInGroup) rowLayoutInGroup?.append(firstRowLayoutInGroup!) groupLayout?.setLayout(rowLayoutInGroup) groupLayout?.setCode(\"Field_group\") // Append layout itemLayoutRequest?.append(rowLayout1!) itemLayoutRequest?.append(subTableLayout!) itemLayoutRequest?.append(groupLayout!) app.updateFormLayout(appId, itemLayoutRequest).then{ basicResponse in print(basicResponse.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getGeneralSettings Gets the description, name, icon, revision and color theme of an App. Declaration func getGeneralSettings(_ app: Int, _ lang: LanguageSetting?, _ isPreview: Bool?) -> Promise<GeneralSettings> Parameter Name Type Required Description app Integer yes The kintone app id lang LanguageSetting (optional) The localized language to retrieve the data in language constants isPreview Boolean (optional) Get general settings of the app with a pre-live settings . Return Promise< GeneralSettings > Sample code get GeneralSettings Source code let appId = {your_app_id} app.getGeneralSettings(self.APP_ID).then{appGeneralSetting in print(appGeneralSetting.getName()) print(appGeneralSetting.getIcon()) print(appGeneralSetting.getKey()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) general settings let appId = {your_app_id} let lang = {your_language_code} // LanguageSetting( EN | JA | ZH ). Ex: LanguageSetting.JA let isPreview = true app.getGeneralSettings(self.APP_ID, self.LANG, isPreview).then{appGeneralSetting in print(appGeneralSetting.getName()) print(appGeneralSetting.getIcon()) print(appGeneralSetting.getKey()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateGeneralSettings Updates the description, name, icon, revision and color theme of an App. Declaration func updateGeneralSettings(_ app: Int, _ generalSettings: GeneralSettings?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer yes The kintone app id generalSettings GeneralSettings (Conditional) The description, name, icon, revision and color theme of an App. The request will fail if the revision number is not the latest revision. The revision will not be checked if ignored, or -1 is specified. Return Promise< BasicResponse > Sample code update general settings Source code let appId: Int = {your_app_id} let appGeneralSetting: GeneralSettings = GeneralSettings() appGeneralSetting.setName(\"GetViewsApp_Test\") appGeneralSetting.setDescription(\" A list of great places to go! \") let iconModel: Icon = Icon(\"APP39\", Icon.IconType.PRESET) appGeneralSetting.setIcon(iconModel) appGeneralSetting.setTheme(GeneralSettings.IconTheme.WHITE) app.updateGeneralSettings(appId, appGeneralSetting).then{ basicResponse in print(basicResponse.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getViews Gets the View settings of an App. Declaration func getViews(_ app: Int, _ lang: LanguageSetting?,_ isPreview: Bool?) -> Promise<GetViewsResponse> Parameter Name Type Required Description app Integer yes The kintone app id lang LanguageSetting (optional) The localized language to retrieve the data in language constants isPreview Boolean (optional) Get views of the app with a pre-live settings when isPreview param is set true . Return Promise< GetViewsResponse > Sample code get Views Source code let appId = {your_app_id} let lang = LanguageSetting.EN // LanguageSetting( EN | JA | ZH ). Ex: LanguageSetting.JA app.getViews(appId, lang).then{ appViewResponse in print(appViewResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) general settings let appId = 2 // your app Id let lang = LanguageSetting.EN // LanguageSetting( EN | JA | ZH ) let isPreview = true app.getViews(appId, lang, isPreview).then{ appViewResponse in print(appViewResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateViews Updates the View settings of an App. Declaration func updateViews(_ app: Int, _ views: [String: ViewModel],_ revision: Int?) -> Promise<UpdateViewsResponse> Parameter Name Type Required Description app Integer yes The kintone app id views HashTable yes An object of data of Views. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< UpdateViewsResponse > Sample code update Views Source code let appId = {your_app_id)} let revision = {your_lastest_revision} //default: revision = -1 var viewEntry: [String: ViewModel] = [String: ViewModel]() let updateViewModel: ViewModel = ViewModel() updateViewModel.setName(\"ViewTest\") updateViewModel.setSort(\"Record_number desc\") updateViewModel.setType(ViewModel.ViewType.LIST) updateViewModel.setFilterCond(\"Created_datetime = LAST_WEEK()\") updateViewModel.setIndex(1) let fieldsViews: [String] = [\"Text\", \"Text_Area\", \"Created_datetime\"] updateViewModel.setFields(fieldsViews) viewEntry[\"ViewTest\"] = updateViewModel let updateViewModel2: ViewModel = ViewModel() updateViewModel2.setName(\"ViewTest2\") updateViewModel2.setSort(\"Record_number asc\") updateViewModel2.setType(ViewModel.ViewType.LIST) updateViewModel2.setFilterCond(\"Created_datetime > LAST_WEEK()\") updateViewModel2.setIndex(0) let fieldsInViews2: [String] = [\"Text_Area\", \"Created_datetime\"] updateViewModel2.setFields(fieldsInViews2) viewEntry[\"ViewTest2\"] = updateViewModel2 app.updateViews(appId, viewEntry, revision).then{ updateViewResponse in print(updateViewResponse.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } Reference Get App Get Apps Get Form fields Get Form Layout Add Preview App Deploy App Settings Get App Deploy Status Get Views Update Views Get General Settings Update General Settings","title":"App"},{"location":"reference/app/#app","text":"Gets general information of an App, including the name, description, related Space, creator, and updater information. Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global() Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"App"},{"location":"reference/app/#constructor","text":"Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init app module Source code // Init authentication var kintoneAuth = Auth() // Password Authentication let username = \"your_usernamr\" let password = \"your_password\" kintoneAuth = kintoneAuth.setPasswordAuth(username, password) let connection = Connection( \"your_domain\", kintoneAuth ) let app = App(connection)","title":"Constructor"},{"location":"reference/app/#methods","text":"","title":"Methods"},{"location":"reference/app/#getapp","text":"Get the single app Declaration func getApp(_ appId: Int) -> Promise<AppModel> Parameter Name Type Required Description appId Integer yes The kintone app ID Return Promise< AppModel > Sample code get App Source code let appId: Int = {your_app_id} app.getApp(appId).then{response in print(\"appId : \\(response.getAppId()!)\") print(\"spaceId : \\(response.getSpaceId())\" ) print(\"threadId : \\(response.getThreadId())\" ) print(\"name : \\(response.getName()!)\") print(\"description : \\(response.getDescription()!)\") print(\"----------------\") }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getApp"},{"location":"reference/app/#getapps","text":"Get multiple apps Declaration func getApps(_ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code Get Apps Source code app.getApps().then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getApps"},{"location":"reference/app/#getappsbyids","text":"Get multiple apps by the list of ids Declaration func getAppsByIDs(_ ids: [Int]?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description ids List<Integer> yes The array of app ids offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code get Apps By IDs Source code var appIds: [Int] = [{your_app_id}, {your_app_id}] let limit: Int = {your_limit} let offset : Int = {your_offset} app.getAppsByIDs(appIds, limit, offset).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getAppsByIDs"},{"location":"reference/app/#getappsbycodes","text":"Get multiple apps by a list of codes Declaration func getAppsByCodes(_ codes: [String]?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description codes List<String> yes The array of app codes offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code get Apps By Codes Source code var appCode: [String] = [{your_app_code}, {your_app_code}] let limit: Int = {your_limit} let offset: Int = {your_offset} app.getAppsByCodes(appCode, limit, offset).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"appCode : \\(appInfo.getCode()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getAppsByCodes"},{"location":"reference/app/#getappsbyname","text":"Get multiple apps by name Declaration func getAppsByName(_ name: String?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description name String yes The app name offset Integer (optional) The offset off data result limit Integer (optional) The limit number of result Return Promise< Array< AppModel >> Sample code get Apps By Name Source code let appName: String = {your_app_name} let limit: Int = {your_limit} let offset: Int = {your_offset} app.getAppsByName(appName, limit, offset).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"appCode : \\(appInfo.getCode()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getAppsByName"},{"location":"reference/app/#getappsbyspaceids","text":"Get multiple apps by space id Declaration func getAppsBySpaceIDs(_ spaceIds: [Int]?, _ offset: Int?, _ limit: Int?) -> Promise<Array<AppModel>> Parameter Name Type Required Description spaceIds Array (optional) The Space ID of where the App resides in. Up to 100 IDs can be specified. offset Integer (optional) The number of retrievals that will be skipped. Must be between 0 and 2147483647. If nothing is specified, it will default to 0. limit Integer (optional) The maximum number of the apps to retrieve. Must be between 1 and 100. If nothing is specified, it will default to 100. Return Promise< Array< AppModel >> Sample code get Apps By SpaceIDs Source code let spaceIds: [Int] = [{your_space_id}, {your_space_id}] let limit = {your_litmit} let offset = {your_offset} app.getAppsBySpaceIDs(spaceIds, offset, limit).then{appsResponse in var count = 1 for appInfo in appsResponse { print(\"App[\\(count)] : \"); print(\"appId : \\(appInfo.getAppId()!)\") print(\"spaceId : \\(appInfo.getSpaceId())\" ) print(\"threadId : \\(appInfo.getThreadId())\" ) print(\"name : \\(appInfo.getName()!)\") print(\"description : \\(appInfo.getDescription()!)\") print(\"----------------\") count = count + 1 } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getAppsBySpaceIDs"},{"location":"reference/app/#addpreviewapp","text":"Creates a preview App. Declaration func addPreviewApp(_ name: String, _ space: Int?, _ thread: Int?) -> Promise<PreviewApp> Parameter Name Type Required Description name String yes The App name. The maximum length is 64 characters. space Integer (optional) The Space ID of where the App will be created. thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise< PreviewApp > Sample code add PreviewApp Source code let spaceId = {your_space_id} // Space will add this app let threadId = {your_thread_id} // Thread will add this app app.addPreviewApp(appName, spaceId, threadId).then{ addPreviewRespones in print(addPreviewRespones?.getApp()) print(addPreviewRespones?.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"addPreviewApp"},{"location":"reference/app/#deployappsettings","text":"Updates the settings of a pre-live App to the live App. Declaration func deployAppSettings(_ apps: Array<PreviewApp>, _ revert: Bool?) -> Promise<Void> Parameter Name Type Required Description apps Array yes The list of Apps to deploy the pre-live settings to the live Apps. The Maximum limit is 300. If Apps are being deployed to Guest Spaces, Apps can only be deployed to the same Guest Space.. revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise <Void> Sample code deploy AppSettings Source code let appId: Int = {your_app_id} let revision: Int = {your_revision} // Revision of application to deploy let appPreview: PreviewApp? = PreviewApp(appId, revision) app.deployAppSettings([appPreview!]).catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"deployAppSettings"},{"location":"reference/app/#getappdeploystatus","text":"Updates the settings of a pre-live App to the live App. Declaration func getAppDeployStatus(_ apps: [Int]) -> Promise<GetAppDeployStatusResponse> Parameter Name Type Required Description apps Array yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise< GetAppDeployStatusResponse > Sample code get App DeployStatus Source code let appIds: [Int] = [{your_app_id}, {your_app_id}] app.getAppDeployStatus(appIds).then{deployStatusReponse in let listAppsDeployStatus = deployStatusReponse?.getApps() for appDeployStatus in listAppsDeployStatus! { print(appDeployStatus.getApp()) print(appDeployStatus.getStatus()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getAppDeployStatus"},{"location":"reference/app/#getformfields","text":"Get field of the form in the kintone app Declaration func getFormFields(_ app: Int, _ lang: LanguageSetting?,_ isPreview: Bool?) -> Promise<FormFields> Parameter Name Type Required Description appId Integer yes The app ID lang LanguageSetting (optional) The language code. Support: DEFAULT: Default language setting of system JA: Japanese language setting ZH: Chinese language setting EN: English language setting isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise< FormFields > Sample code get FormFields Source code let appId: Int = {your_app_id} // Integer let lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA app.getFormFields(appId, lang).then{ formFieldsResponse in print(formFieldsResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) form fields let appId: Int = {your_app_id} // Integer let lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA let isPreview: Bool = true self.app?.getFormFields(appId, lang, isPreview).then{ formFieldsResponse in print(formFieldsResponse) // FormFields Object }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getFormFields"},{"location":"reference/app/#addformfields","text":"Adds fields to a form of an App. Declaration func addFormFields(_ app: Int, _ fields: [String: Field],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description appId Integer yes The app ID fields [String: Field] (optional) The formFields which will add to form of kintone app Note: [String: Field]: Key: The field code of field on kintone app Value: The field settings of form field on kintone app revision Boolean (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code add FormFields Source code let appId: Int = {your_app_id} // App Id let fieldCode: String = {field_code_string} // Field code of new Field. It must be not as same as any fields in Pre-Live App Setttings let revision: Int = {latest_revision_of_the_settings} // Integer // Create Radio field instance and set properties let addNewField = RadioButtonField(fieldCode) var optionArray = [String: OptionData]() optionArray[\"1\"] = OptionData(\"1\",\"1\") optionArray[\"2\"] = OptionData(\"2\",\"2\") optionArray[\"3\"] = OptionData(\"3\",\"3\") addNewField.setOptions(optionArray) addNewField.setNoLabel(false) addNewField.setRequired(true) addNewField.setLabel(\"Label Radio\") addNewField.setAlign(AlignLayout.VERTICAL) // Add Field object into dictionary with key is Field Code var properties = [String: Field]() properties[fieldCode] = addNewField // Another add field here app.addFormFields(self.APP_ID, properties, revision).then{ basicResponse in print(basicResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"addFormFields"},{"location":"reference/app/#updateformfields","text":"Updates the field settings of fields in a form of an App. Declaration func updateFormFields(_ app: Int, _ fields: [String: Field],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer yes The app ID fields [String: Field] (optional) The formFields which will add to form of kintone app Note: [String: Field]: Key: The field code of field on kintone app Value: The field settings of form field on kintone app revision Boolean (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code update FormFields Source code let appId: Int = {your_app_id} // Integer let fieldCode: String = {field_code_string} // String | fieldCode of exist fields in Pre-Live App Setttings let revision: Int = {latest_revision_of_the_settings} // Integer // Create Field Object to Update let updateField = SingleLineTextField(fieldCode) updateField.setDefaultValue(\"Hello Kintone\") updateField.setRequired(true) // Add Update Field object into dictionary with key is Field Code var properties = [String: Field]() properties[fieldCode] = updateField app.updateFormFields(appId, properties, revision).then{ basicResponse in print(basicResponse) // BasicResponse { revision : } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateFormFields"},{"location":"reference/app/#deleteformfields","text":"Deletes fields from a form of an App. Declaration func deleteFormFields(_ app: Int, _ fields: [String],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer yes The app ID fields Array<String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code delete FormFields Source code let appId: Int = {your_app_id} // Integer let fieldCodeArray: [String] = [{field_code_string}] // Array | Array of fieldCodes of exist fields in Pre-Live App Setttings let revision: Int = {latest_revision_of_the_settings} // Integer app.deleteFormFields(appId, fieldCodeArray, revision).then{ basicResponse in print(basicResponse) // BasicResponse { revision : } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"deleteFormFields"},{"location":"reference/app/#getformlayout","text":"Get the layout of form in kintone app Declaration func getFormLayout(_ app: Int, _ isPreview: Bool?) -> Promise<FormLayout> Parameter Name Type Required Description app Integer yes The kintone app id isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise< FormLayout > Sample code get FormLayout Source code let appId: Int = {your_app_id} // Integer app.getFormLayout(appId).then{ formLayoutResponse in print(response_layout.getLayout()!) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) form fields let appId: Int = {your_app_id} // Integer let isPreview: Bool = true app.getFormLayout(appId, isPreview).then{ formLayoutResponse in print(response_layout.getLayout()!) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getFormLayout"},{"location":"reference/app/#updateformlayout","text":"Updates the field layout info of a form in an App. Declaration func updateFormLayout(_ app: Int, _ layout: [ItemLayout],_ revision: Int?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer The kintone app id layout Array<ItemLayout> yes A list of field layouts for each row. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< BasicResponse > Sample code update FormLayout Source code let appId: Int = {your_app_id} // Integer var itemLayoutRequest: [ItemLayout]? = [ItemLayout]() // Row Layout let rowLayout1: RowLayout? = RowLayout() var fieldsRowLayout1: [FieldLayout]? = [FieldLayout]() let singleFieldRowLayout1: FieldLayout? = FieldLayout() singleFieldRowLayout1?.setCode(\"Text\") singleFieldRowLayout1?.setType(FieldType.SINGLE_LINE_TEXT.rawValue) let singleFieldSizeRowLayout1: FieldSize? = FieldSize() singleFieldSizeRowLayout1?.setWidth(\"193\") singleFieldRowLayout1?.setSize(singleFieldSizeRowLayout1) fieldsRowLayout1?.append(singleFieldRowLayout1!) let richTextFieldRowLayout1: FieldLayout? = FieldLayout() richTextFieldRowLayout1?.setCode(\"Rich_text\") richTextFieldRowLayout1?.setType(FieldType.RICH_TEXT.rawValue) let richTextFieldSizeRowLayout1: FieldSize? = FieldSize() richTextFieldSizeRowLayout1?.setWidth(\"315\") richTextFieldSizeRowLayout1?.setInnerHeight(\"125\") richTextFieldRowLayout1?.setSize(richTextFieldSizeRowLayout1) fieldsRowLayout1?.append(richTextFieldRowLayout1!) rowLayout1?.setFields(fieldsRowLayout1) // Subtable Layout let subTableLayout: SubTableLayout? = SubTableLayout() var fieldSubTableLayout: [FieldLayout]? = [FieldLayout]() let singleFieldSubTableLayout1: FieldLayout? = FieldLayout() singleFieldSubTableLayout1?.setCode(\"Text_0\") singleFieldSubTableLayout1?.setType(FieldType.SINGLE_LINE_TEXT.rawValue) let singleFieldSizeSubTableLayout1: FieldSize? = FieldSize() singleFieldSizeSubTableLayout1?.setWidth(\"193\") singleFieldSubTableLayout1?.setSize(singleFieldSizeSubTableLayout1) fieldSubTableLayout?.append(singleFieldSubTableLayout1!) subTableLayout?.setFields(fieldSubTableLayout) subTableLayout?.setCode(\"Table\") // GROUP Layout let groupLayout: GroupLayout? = GroupLayout() var rowLayoutInGroup: [RowLayout]? = [RowLayout]() // Row Layout let firstRowLayoutInGroup: RowLayout? = RowLayout() var fieldsInRowLayoutInGroup: [FieldLayout]? = [FieldLayout]() // Numeric Field Layout let numericFieldInRowLayoutInGroup: FieldLayout? = FieldLayout() numericFieldInRowLayoutInGroup?.setCode(\"Number\") numericFieldInRowLayoutInGroup?.setType(FieldType.NUMBER.rawValue) // field size let numericFieldSizeInRowLayoutInGroup: FieldSize? = FieldSize() numericFieldSizeInRowLayoutInGroup?.setWidth(\"200\") numericFieldInRowLayoutInGroup?.setSize(numericFieldSizeInRowLayoutInGroup) fieldsInRowLayoutInGroup?.append(numericFieldInRowLayoutInGroup!) firstRowLayoutInGroup?.setFields(fieldsInRowLayoutInGroup) rowLayoutInGroup?.append(firstRowLayoutInGroup!) groupLayout?.setLayout(rowLayoutInGroup) groupLayout?.setCode(\"Field_group\") // Append layout itemLayoutRequest?.append(rowLayout1!) itemLayoutRequest?.append(subTableLayout!) itemLayoutRequest?.append(groupLayout!) app.updateFormLayout(appId, itemLayoutRequest).then{ basicResponse in print(basicResponse.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateFormLayout"},{"location":"reference/app/#getgeneralsettings","text":"Gets the description, name, icon, revision and color theme of an App. Declaration func getGeneralSettings(_ app: Int, _ lang: LanguageSetting?, _ isPreview: Bool?) -> Promise<GeneralSettings> Parameter Name Type Required Description app Integer yes The kintone app id lang LanguageSetting (optional) The localized language to retrieve the data in language constants isPreview Boolean (optional) Get general settings of the app with a pre-live settings . Return Promise< GeneralSettings > Sample code get GeneralSettings Source code let appId = {your_app_id} app.getGeneralSettings(self.APP_ID).then{appGeneralSetting in print(appGeneralSetting.getName()) print(appGeneralSetting.getIcon()) print(appGeneralSetting.getKey()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) general settings let appId = {your_app_id} let lang = {your_language_code} // LanguageSetting( EN | JA | ZH ). Ex: LanguageSetting.JA let isPreview = true app.getGeneralSettings(self.APP_ID, self.LANG, isPreview).then{appGeneralSetting in print(appGeneralSetting.getName()) print(appGeneralSetting.getIcon()) print(appGeneralSetting.getKey()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getGeneralSettings"},{"location":"reference/app/#updategeneralsettings","text":"Updates the description, name, icon, revision and color theme of an App. Declaration func updateGeneralSettings(_ app: Int, _ generalSettings: GeneralSettings?) -> Promise<BasicResponse> Parameter Name Type Required Description app Integer yes The kintone app id generalSettings GeneralSettings (Conditional) The description, name, icon, revision and color theme of an App. The request will fail if the revision number is not the latest revision. The revision will not be checked if ignored, or -1 is specified. Return Promise< BasicResponse > Sample code update general settings Source code let appId: Int = {your_app_id} let appGeneralSetting: GeneralSettings = GeneralSettings() appGeneralSetting.setName(\"GetViewsApp_Test\") appGeneralSetting.setDescription(\" A list of great places to go! \") let iconModel: Icon = Icon(\"APP39\", Icon.IconType.PRESET) appGeneralSetting.setIcon(iconModel) appGeneralSetting.setTheme(GeneralSettings.IconTheme.WHITE) app.updateGeneralSettings(appId, appGeneralSetting).then{ basicResponse in print(basicResponse.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateGeneralSettings"},{"location":"reference/app/#getviews","text":"Gets the View settings of an App. Declaration func getViews(_ app: Int, _ lang: LanguageSetting?,_ isPreview: Bool?) -> Promise<GetViewsResponse> Parameter Name Type Required Description app Integer yes The kintone app id lang LanguageSetting (optional) The localized language to retrieve the data in language constants isPreview Boolean (optional) Get views of the app with a pre-live settings when isPreview param is set true . Return Promise< GetViewsResponse > Sample code get Views Source code let appId = {your_app_id} let lang = LanguageSetting.EN // LanguageSetting( EN | JA | ZH ). Ex: LanguageSetting.JA app.getViews(appId, lang).then{ appViewResponse in print(appViewResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } // Get a pre-live (preview) general settings let appId = 2 // your app Id let lang = LanguageSetting.EN // LanguageSetting( EN | JA | ZH ) let isPreview = true app.getViews(appId, lang, isPreview).then{ appViewResponse in print(appViewResponse) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getViews"},{"location":"reference/app/#updateviews","text":"Updates the View settings of an App. Declaration func updateViews(_ app: Int, _ views: [String: ViewModel],_ revision: Int?) -> Promise<UpdateViewsResponse> Parameter Name Type Required Description app Integer yes The kintone app id views HashTable yes An object of data of Views. revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. The revision will not be checked if this parameter is ignored, or -1 is specified. Return Promise< UpdateViewsResponse > Sample code update Views Source code let appId = {your_app_id)} let revision = {your_lastest_revision} //default: revision = -1 var viewEntry: [String: ViewModel] = [String: ViewModel]() let updateViewModel: ViewModel = ViewModel() updateViewModel.setName(\"ViewTest\") updateViewModel.setSort(\"Record_number desc\") updateViewModel.setType(ViewModel.ViewType.LIST) updateViewModel.setFilterCond(\"Created_datetime = LAST_WEEK()\") updateViewModel.setIndex(1) let fieldsViews: [String] = [\"Text\", \"Text_Area\", \"Created_datetime\"] updateViewModel.setFields(fieldsViews) viewEntry[\"ViewTest\"] = updateViewModel let updateViewModel2: ViewModel = ViewModel() updateViewModel2.setName(\"ViewTest2\") updateViewModel2.setSort(\"Record_number asc\") updateViewModel2.setType(ViewModel.ViewType.LIST) updateViewModel2.setFilterCond(\"Created_datetime > LAST_WEEK()\") updateViewModel2.setIndex(0) let fieldsInViews2: [String] = [\"Text_Area\", \"Created_datetime\"] updateViewModel2.setFields(fieldsInViews2) viewEntry[\"ViewTest2\"] = updateViewModel2 app.updateViews(appId, viewEntry, revision).then{ updateViewResponse in print(updateViewResponse.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateViews"},{"location":"reference/app/#reference","text":"Get App Get Apps Get Form fields Get Form Layout Add Preview App Deploy App Settings Get App Deploy Status Get Views Update Views Get General Settings Update General Settings","title":"Reference"},{"location":"reference/authentication/","text":"Authentication Authentication module will be used by Connection . This module allows authenticating with the Kintone app by password authenticator or API token authenticator. This module is also supported the basic authenticator. Warning If both the Token and the Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used. Constructor Parameter (none) Sample code Init authentication module Source code let kintoneAuth = Auth() Methods setPasswordAuth Set password authentication for the Authentication module. Declaration func setPasswordAuth(_ username: String, _ password: String) -> Auth Parameter Name Type Required Description username String yes The username that is able to authenticate on the kintone app password String yes The password that is able to authenticate on the kintone app Return Auth Sample code Set password authentication Source code let username: String? = \"cybozu\"; let password: String? = \"cybozu\"; kintoneAuth.setPasswordAuth(username, password); setApiToken Set Api Token for the Authentication module. Declaration func setApiToken(_ apiToken: String) -> Auth Parameter Name Type Required Description apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication Source code let apiToken: String? = \"123456789abcdefghijklmnopqrstuvwxyz\"; kintoneAuth.setApiToken(apiToken); setBasicAuth Set Basic authentication for the Authentication module. Declaration func setBasicAuth(_ username: String, _ password: String) -> Auth Parameter Name Type Required Description username String yes The username that is able to authenticate on the kintone app password String yes The password that is able to authenticate on the kintone app Return Auth Sample code Set basic authentication Source code let username: String? = \"cybozu\"; let password: String? = \"cybozu\"; kintoneAuth.setBasicAuth(username, password); createHeaderCredentials Provide the list of HTTP Headers which use to authentication in. Declaration func createHeaderCredentials() -> [HTTPHeader?] Parameter (none) Return Array<HTTPHeader> Sample code Provide the list of HTTP Headers which use to authentication in Source code let loginName: String? = \"your_user_login_name\" let loginPassword: String? = \"your_password\" let basicLoginName: String? = \"your_basic_login_name\" let basicLoginPassword: String? = \"your_basic_password\" let apiToken: String? = \"your_api_token\" let auth = Auth() auth.setBasicAuth(basicLoginName, basicLoginPassword) auth.setPasswordAuth(loginName, loginPassword) auth.setApiToken(apiToken) let headers: [HTTPHeader?] = auth.createHeaderCredentials() var count = 0 for header in headers { print(\"Key[\" + count.description + \"]: \" + (header?.getKey())!) print(\"Value[\" + count.description + \"]: \" + (header?.getValue())!) count += 1 } setClientCert Set certificate by certificate data Declaration func setClientCert(_ certData: Data, _ password: String) -> Auth Parameter Name Type Required Description certData Data yes Data read from certificate file received from kintone password String yes The password from kintone to decode the cert file Return Auth Sample code Set certificate by certificate data Source code let certPassword = \"YOUR_CERT_PASSWORD\" let testBundle = Bundle(for: type(of: self)) let certData = try! Data(contentsOf: testBundle.url(forResource: \"YOUR_CERT_NAME\", withExtension: \"YOUR_CERT_EXTENSION\")!) auth.setClientCert(certData, certPassword) let conn = Connection(\"YOUR_DOMAIN\", auth, -1) setClientCertByPath Set certificate by path Declaration func setClientCertByPath(_ certPath: String, _ password: String) -> Auth Parameter Name Type Required Description certPath String yes Path to kintone certificate file password String yes The password from kintone to decode the cert file Return Auth Sample code Set certificate by path Source code let certPassword = \"YOUR_CERT_PASSWORD\" let testBundle = Bundle(for: type(of: self)) let pathURLString = testBundle.url(forResource: \"YOUR_CERT_NAME\", withExtension: \"YOUR_CERT_EXTENSION\") auth.setClientCertByPath(pathURLString!.absoluteString, certPassword) let conn = Connection(\"YOUR_DOMAIN\", auth, -1)","title":"Authentication"},{"location":"reference/authentication/#authentication","text":"Authentication module will be used by Connection . This module allows authenticating with the Kintone app by password authenticator or API token authenticator. This module is also supported the basic authenticator. Warning If both the Token and the Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used.","title":"Authentication"},{"location":"reference/authentication/#constructor","text":"Parameter (none) Sample code Init authentication module Source code let kintoneAuth = Auth()","title":"Constructor"},{"location":"reference/authentication/#methods","text":"","title":"Methods"},{"location":"reference/authentication/#setpasswordauth","text":"Set password authentication for the Authentication module. Declaration func setPasswordAuth(_ username: String, _ password: String) -> Auth Parameter Name Type Required Description username String yes The username that is able to authenticate on the kintone app password String yes The password that is able to authenticate on the kintone app Return Auth Sample code Set password authentication Source code let username: String? = \"cybozu\"; let password: String? = \"cybozu\"; kintoneAuth.setPasswordAuth(username, password);","title":"setPasswordAuth"},{"location":"reference/authentication/#setapitoken","text":"Set Api Token for the Authentication module. Declaration func setApiToken(_ apiToken: String) -> Auth Parameter Name Type Required Description apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication Source code let apiToken: String? = \"123456789abcdefghijklmnopqrstuvwxyz\"; kintoneAuth.setApiToken(apiToken);","title":"setApiToken"},{"location":"reference/authentication/#setbasicauth","text":"Set Basic authentication for the Authentication module. Declaration func setBasicAuth(_ username: String, _ password: String) -> Auth Parameter Name Type Required Description username String yes The username that is able to authenticate on the kintone app password String yes The password that is able to authenticate on the kintone app Return Auth Sample code Set basic authentication Source code let username: String? = \"cybozu\"; let password: String? = \"cybozu\"; kintoneAuth.setBasicAuth(username, password);","title":"setBasicAuth"},{"location":"reference/authentication/#createheadercredentials","text":"Provide the list of HTTP Headers which use to authentication in. Declaration func createHeaderCredentials() -> [HTTPHeader?] Parameter (none) Return Array<HTTPHeader> Sample code Provide the list of HTTP Headers which use to authentication in Source code let loginName: String? = \"your_user_login_name\" let loginPassword: String? = \"your_password\" let basicLoginName: String? = \"your_basic_login_name\" let basicLoginPassword: String? = \"your_basic_password\" let apiToken: String? = \"your_api_token\" let auth = Auth() auth.setBasicAuth(basicLoginName, basicLoginPassword) auth.setPasswordAuth(loginName, loginPassword) auth.setApiToken(apiToken) let headers: [HTTPHeader?] = auth.createHeaderCredentials() var count = 0 for header in headers { print(\"Key[\" + count.description + \"]: \" + (header?.getKey())!) print(\"Value[\" + count.description + \"]: \" + (header?.getValue())!) count += 1 }","title":"createHeaderCredentials"},{"location":"reference/authentication/#setclientcert","text":"Set certificate by certificate data Declaration func setClientCert(_ certData: Data, _ password: String) -> Auth Parameter Name Type Required Description certData Data yes Data read from certificate file received from kintone password String yes The password from kintone to decode the cert file Return Auth Sample code Set certificate by certificate data Source code let certPassword = \"YOUR_CERT_PASSWORD\" let testBundle = Bundle(for: type(of: self)) let certData = try! Data(contentsOf: testBundle.url(forResource: \"YOUR_CERT_NAME\", withExtension: \"YOUR_CERT_EXTENSION\")!) auth.setClientCert(certData, certPassword) let conn = Connection(\"YOUR_DOMAIN\", auth, -1)","title":"setClientCert"},{"location":"reference/authentication/#setclientcertbypath","text":"Set certificate by path Declaration func setClientCertByPath(_ certPath: String, _ password: String) -> Auth Parameter Name Type Required Description certPath String yes Path to kintone certificate file password String yes The password from kintone to decode the cert file Return Auth Sample code Set certificate by path Source code let certPassword = \"YOUR_CERT_PASSWORD\" let testBundle = Bundle(for: type(of: self)) let pathURLString = testBundle.url(forResource: \"YOUR_CERT_NAME\", withExtension: \"YOUR_CERT_EXTENSION\") auth.setClientCertByPath(pathURLString!.absoluteString, certPassword) let conn = Connection(\"YOUR_DOMAIN\", auth, -1)","title":"setClientCertByPath"},{"location":"reference/bulk-request/","text":"BulkRequest The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init bulk request module Source code let username = \"your_username\" let password = \"your_password\" let domain = \"your_domain\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Bulk request var bulkRequest = BulkRequest(connection); Methods All below methods (excluded execute() method) will add the request to the queue, you must execute the execute() function to get the result of BulkRequest. addRecord Declaration func addRecord(_ app: Int, _ record: [String: FieldValue]?) throws -> BulkRequest Parameter See at Record - addRecord Return BulkRequest Sample code add Record Source code var record: [String: FieldValue] = [:] let fv = FieldValue() fv.setType(FieldType.SINGLE_LINE_TEXT) fv.setValue(\"test_AddRecord\") record[\"Your_Field_Code\"] = fv bulkRequest = try! bulkRequest?.addRecord(1, record) addRecords Declaration func addRecords(_ app: Int, _ records: Array<[String: FieldValue]?>) throws -> BulkRequest Parameter See at Record - addRecords Return BulkRequest Sample code add multiple Records Source code // create add data var addData1: Dictionary<String, FieldValue> = [:] var addData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Value1\") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Value2\") addData1[{your_field_code}] = field1 addData2[{your_field_code}] = field2 var = [addData1, addData2] // create addRecords bulk request let appID = 311 bulkRequest = try! bulkRequest?.addRecords(appID, addDataList); updateRecordByID Declaration func updateRecordByID(_ app: Int, _ id: Int, _ record: [String: FieldValue]?, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordByID Return BulkRequest Sample code update Record By ID Source code // create add data var updateData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update\") updateData[{your_field_code}] = field // create updateRecordByID bulk request let appID = {your_app_id} let updRecID = {your_record_id} bulkRequest = try! bulkRequest?.updateRecordByID(appID, updRecID, updateData, nil); updateRecordByUpdateKey Declaration func updateRecordByUpdateKey(_ app: Int, _ updateKey: RecordUpdateKey, _ record: [String: FieldValue]?, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordByUpdateKey Return BulkRequest Sample code update Record By UpdateKey Source code // create update data var updateData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") updateData[{your_field_code}] = field // create update key let updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let appID = {your_app_id} // create updateRecordByUpdateKey bulk request bulkRequest = try! bulkRequest?.updateRecordByUpdateKey(appID, updKey, updateData, nil); updateRecords Declaration func updateRecords(_ app: Int, _ records: Array<RecordUpdateItem> ) throws -> BulkRequest Parameter See at Record - updateRecords Return BulkRequest Sample code update multiple Records Source code // create update data var recId1 = {your_record_id} var recId2 = {your_record_id} var updateData1: Dictionary<String, FieldValue> = [:] var updateData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Update Value1 \") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Update Value2\") updateData1[{your_field_code}] = field1 updateData2[{your_field_code}] = field2 var updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1) var updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2) let updateItemList = [updateDataItem1 , updateDataItem2] // create updateRecords bulk request let appID = {your_app_id} bulkRequest = try! bulkRequest?.updateRecords(appID, updateItemList); deleteRecords Declaration func deleteRecords(_ app: Int, _ ids: Array<Int>) throws -> BulkRequest Parameter See at Record - deleteRecords Return BulkRequest Sample code Bulk Delete Records Source code // create deleteRecords bulk request let appID = {your_app_id} let delRecordID1 = {your_record_id1} let delRecordID2 = {your_record_id2} let delIdList = [delRecordID1, delRecordID2] bulkRequest = try! bulkRequest?.deleteRecords(appID, delIdList); deleteRecordsWithRevision Declaration func deleteRecordsWithRevision(_ app: Int, _ idsWithRevision: [Int: Int?]) throws -> BulkRequest Parameter See at Record - deleteRecordsWithRevision Return BulkRequest Sample code delete Records With Revision Source code // create deleteRecordsWithRevision bulk request let appID = {your_app_id} var delIdAndRevision: Dictionary<Int, Int> = [:] delIdAndRevision[{your_record_id}] = {your_revision_id} delIdAndRevision[{your_record_id}] = {your_revision_id} bulkRequest = try! bulkRequest?.deleteRecordsWithRevision(appID, delIdAndRevision); updateRecordAssignees Declaration func updateRecordAssignees(_ app: Int, _ record: Int, _ assignees: Array<String>, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordAssignees Return BulkRequest Sample code Update the Assignees for the record Source code // create updateRecordAssignees bulk request let appID = {your_app_od} let updRecID = {your_record_id} let assignees = [\"{your_user_code}\"] bulkRequest = try! bulkRequest?.updateRecordAssignees(appID, updRecID, assignees, nil); updateRecordStatus Declaration func updateRecordStatus(_ app: Int, _ id: Int, _ action: String, _ assignee: String?, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordStatus Return BulkRequest Sample code Update the status of a single record Source code // create updateRecordStatus bulk request let appID = {your_app_id} let updRecID = {your_record_id} let assignees = \"{your_user_code}\" let status = \"{your_status}\" bulkRequest = try! bulkRequest?.updateRecordStatus(appID, updRecID, status, assignees, nil); updateRecordsStatus Declaration func updateRecordsStatus(_ app: Int, _ records: Array<RecordUpdateStatusItem>) throws -> BulkRequest Parameter See at Record - updateRecordsStatus Return BulkRequest Sample code Update the status of multiple records in bulk Source code // create updateRecordsStatus bulk request let appID = {your_app_id} let updRecID1 = {your_record_id1} let updRecID2 = {your_record_id2} let assignees1 = [{your_login_code1}] let assignees2 = [{your_login_code2}] let status1 = {your_update_status1} let status2 = {your_update_status2} let item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil) let item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil) let itemList = [item1, item2] bulkRequest = try! bulkRequest?.updateRecordsStatus(appID, itemList); execute Execute the bulk request and get data response Declaration func execute() -> Promise<BulkRequestResponse> Parameter (none) Return Promise< BulkRequestResponse > Sample code Execute bulk request Source code bulkRequest?.execute().then{responses in print(responses) }.catch{error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription)) } } Reference Bulk Request","title":"Bulk Request"},{"location":"reference/bulk-request/#bulkrequest","text":"The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees","title":"BulkRequest"},{"location":"reference/bulk-request/#constructor","text":"","title":"Constructor"},{"location":"reference/bulk-request/#parameter","text":"Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init bulk request module Source code let username = \"your_username\" let password = \"your_password\" let domain = \"your_domain\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Bulk request var bulkRequest = BulkRequest(connection);","title":"Parameter"},{"location":"reference/bulk-request/#methods","text":"All below methods (excluded execute() method) will add the request to the queue, you must execute the execute() function to get the result of BulkRequest.","title":"Methods"},{"location":"reference/bulk-request/#addrecord","text":"Declaration func addRecord(_ app: Int, _ record: [String: FieldValue]?) throws -> BulkRequest Parameter See at Record - addRecord Return BulkRequest Sample code add Record Source code var record: [String: FieldValue] = [:] let fv = FieldValue() fv.setType(FieldType.SINGLE_LINE_TEXT) fv.setValue(\"test_AddRecord\") record[\"Your_Field_Code\"] = fv bulkRequest = try! bulkRequest?.addRecord(1, record)","title":"addRecord"},{"location":"reference/bulk-request/#addrecords","text":"Declaration func addRecords(_ app: Int, _ records: Array<[String: FieldValue]?>) throws -> BulkRequest Parameter See at Record - addRecords Return BulkRequest Sample code add multiple Records Source code // create add data var addData1: Dictionary<String, FieldValue> = [:] var addData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Value1\") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Value2\") addData1[{your_field_code}] = field1 addData2[{your_field_code}] = field2 var = [addData1, addData2] // create addRecords bulk request let appID = 311 bulkRequest = try! bulkRequest?.addRecords(appID, addDataList);","title":"addRecords"},{"location":"reference/bulk-request/#updaterecordbyid","text":"Declaration func updateRecordByID(_ app: Int, _ id: Int, _ record: [String: FieldValue]?, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordByID Return BulkRequest Sample code update Record By ID Source code // create add data var updateData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update\") updateData[{your_field_code}] = field // create updateRecordByID bulk request let appID = {your_app_id} let updRecID = {your_record_id} bulkRequest = try! bulkRequest?.updateRecordByID(appID, updRecID, updateData, nil);","title":"updateRecordByID"},{"location":"reference/bulk-request/#updaterecordbyupdatekey","text":"Declaration func updateRecordByUpdateKey(_ app: Int, _ updateKey: RecordUpdateKey, _ record: [String: FieldValue]?, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordByUpdateKey Return BulkRequest Sample code update Record By UpdateKey Source code // create update data var updateData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") updateData[{your_field_code}] = field // create update key let updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let appID = {your_app_id} // create updateRecordByUpdateKey bulk request bulkRequest = try! bulkRequest?.updateRecordByUpdateKey(appID, updKey, updateData, nil);","title":"updateRecordByUpdateKey"},{"location":"reference/bulk-request/#updaterecords","text":"Declaration func updateRecords(_ app: Int, _ records: Array<RecordUpdateItem> ) throws -> BulkRequest Parameter See at Record - updateRecords Return BulkRequest Sample code update multiple Records Source code // create update data var recId1 = {your_record_id} var recId2 = {your_record_id} var updateData1: Dictionary<String, FieldValue> = [:] var updateData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Update Value1 \") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Update Value2\") updateData1[{your_field_code}] = field1 updateData2[{your_field_code}] = field2 var updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1) var updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2) let updateItemList = [updateDataItem1 , updateDataItem2] // create updateRecords bulk request let appID = {your_app_id} bulkRequest = try! bulkRequest?.updateRecords(appID, updateItemList);","title":"updateRecords"},{"location":"reference/bulk-request/#deleterecords","text":"Declaration func deleteRecords(_ app: Int, _ ids: Array<Int>) throws -> BulkRequest Parameter See at Record - deleteRecords Return BulkRequest Sample code Bulk Delete Records Source code // create deleteRecords bulk request let appID = {your_app_id} let delRecordID1 = {your_record_id1} let delRecordID2 = {your_record_id2} let delIdList = [delRecordID1, delRecordID2] bulkRequest = try! bulkRequest?.deleteRecords(appID, delIdList);","title":"deleteRecords"},{"location":"reference/bulk-request/#deleterecordswithrevision","text":"Declaration func deleteRecordsWithRevision(_ app: Int, _ idsWithRevision: [Int: Int?]) throws -> BulkRequest Parameter See at Record - deleteRecordsWithRevision Return BulkRequest Sample code delete Records With Revision Source code // create deleteRecordsWithRevision bulk request let appID = {your_app_id} var delIdAndRevision: Dictionary<Int, Int> = [:] delIdAndRevision[{your_record_id}] = {your_revision_id} delIdAndRevision[{your_record_id}] = {your_revision_id} bulkRequest = try! bulkRequest?.deleteRecordsWithRevision(appID, delIdAndRevision);","title":"deleteRecordsWithRevision"},{"location":"reference/bulk-request/#updaterecordassignees","text":"Declaration func updateRecordAssignees(_ app: Int, _ record: Int, _ assignees: Array<String>, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordAssignees Return BulkRequest Sample code Update the Assignees for the record Source code // create updateRecordAssignees bulk request let appID = {your_app_od} let updRecID = {your_record_id} let assignees = [\"{your_user_code}\"] bulkRequest = try! bulkRequest?.updateRecordAssignees(appID, updRecID, assignees, nil);","title":"updateRecordAssignees"},{"location":"reference/bulk-request/#updaterecordstatus","text":"Declaration func updateRecordStatus(_ app: Int, _ id: Int, _ action: String, _ assignee: String?, _ revision: Int?) throws -> BulkRequest Parameter See at Record - updateRecordStatus Return BulkRequest Sample code Update the status of a single record Source code // create updateRecordStatus bulk request let appID = {your_app_id} let updRecID = {your_record_id} let assignees = \"{your_user_code}\" let status = \"{your_status}\" bulkRequest = try! bulkRequest?.updateRecordStatus(appID, updRecID, status, assignees, nil);","title":"updateRecordStatus"},{"location":"reference/bulk-request/#updaterecordsstatus","text":"Declaration func updateRecordsStatus(_ app: Int, _ records: Array<RecordUpdateStatusItem>) throws -> BulkRequest Parameter See at Record - updateRecordsStatus Return BulkRequest Sample code Update the status of multiple records in bulk Source code // create updateRecordsStatus bulk request let appID = {your_app_id} let updRecID1 = {your_record_id1} let updRecID2 = {your_record_id2} let assignees1 = [{your_login_code1}] let assignees2 = [{your_login_code2}] let status1 = {your_update_status1} let status2 = {your_update_status2} let item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil) let item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil) let itemList = [item1, item2] bulkRequest = try! bulkRequest?.updateRecordsStatus(appID, itemList);","title":"updateRecordsStatus"},{"location":"reference/bulk-request/#execute","text":"Execute the bulk request and get data response Declaration func execute() -> Promise<BulkRequestResponse> Parameter (none) Return Promise< BulkRequestResponse > Sample code Execute bulk request Source code bulkRequest?.execute().then{responses in print(responses) }.catch{error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription)) } }","title":"execute"},{"location":"reference/bulk-request/#reference","text":"Bulk Request","title":"Reference"},{"location":"reference/connection/","text":"Connection Connection module will be used as a connector to connect to the kintone Rest API Constructor Parameter Name Type Required Description domain String yes The Domain name or FQDN auth Auth yes The authentication object guestSpaceID Integer (optional) The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module Source code // Define Authentication object // Init Authentication let loginName = 'your_user_login_name' let loginPassword = 'your_password' let domain = 'your_kintone_domain' // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init connection let connection = Connection(domain, auth) // Define the connection that included guest space // Init Authentication let loginName = 'your_user_login_name' let loginPassword = 'your_password' let domain = 'your_kintone_domain' // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Guest space let guestSpaceID = 3 // Init connection let connection = Connection(domain, auth, guestSpaceID) Methods setHeader Set new header of the Connection Declaration func setHeader(_ key: String, _ value: String) -> Connection Parameter Name Type Required Description key String yes The header's key name value String yes The header's value of key Return Connection Sample code Set header of the Connection Source code // Define Authentication object // Init Authentication let loginName = 'your_user_name' let loginPassword = 'your_password' let domain = 'your_kintone_domain' let key = \"X-HTTP-Method-Override\" let value = \"GET\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init connection let connection = Connection(domain, auth) connection.setHeader(key, value) setProxy Set the proxy of the request Declaration func setProxy(_ host: String,_ port: Int,_ username: String? = nil,_ password: String? = nil) Parameter Name Description host The proxy host name port The proxy port number username User name of the proxy password Password of the proxy Return (none) Sample code Set the proxy of the request Source code let proxyHost = \"{YOUR_PROXY_HOST}\" let proxyPort = {YOUR_PROXY_PORT} // Set proxy with auth let proxyUsername = \"{YOUR_PROXY_USERNAME}\" let proxyPassword = \"{YOUR_PROXY_PASSWORD}\" let username = \"{YOUR_USERNAME}\" let password = \"{YOUR_PASSWORD}\" let domain = \"{YOUR_DOMAIN}\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init connection let connection = Connection(domain, auth) // Set proxy without auth connection.setProxy(proxyHost, proxyPort) // Set proxy with auth connection.setProxy(proxyHost, proxyPort, proxyUsername, proxyPassword)","title":"Connection"},{"location":"reference/connection/#connection","text":"Connection module will be used as a connector to connect to the kintone Rest API","title":"Connection"},{"location":"reference/connection/#constructor","text":"Parameter Name Type Required Description domain String yes The Domain name or FQDN auth Auth yes The authentication object guestSpaceID Integer (optional) The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module Source code // Define Authentication object // Init Authentication let loginName = 'your_user_login_name' let loginPassword = 'your_password' let domain = 'your_kintone_domain' // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init connection let connection = Connection(domain, auth) // Define the connection that included guest space // Init Authentication let loginName = 'your_user_login_name' let loginPassword = 'your_password' let domain = 'your_kintone_domain' // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Guest space let guestSpaceID = 3 // Init connection let connection = Connection(domain, auth, guestSpaceID)","title":"Constructor"},{"location":"reference/connection/#methods","text":"","title":"Methods"},{"location":"reference/connection/#setheader","text":"Set new header of the Connection Declaration func setHeader(_ key: String, _ value: String) -> Connection Parameter Name Type Required Description key String yes The header's key name value String yes The header's value of key Return Connection Sample code Set header of the Connection Source code // Define Authentication object // Init Authentication let loginName = 'your_user_name' let loginPassword = 'your_password' let domain = 'your_kintone_domain' let key = \"X-HTTP-Method-Override\" let value = \"GET\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init connection let connection = Connection(domain, auth) connection.setHeader(key, value)","title":"setHeader"},{"location":"reference/connection/#setproxy","text":"Set the proxy of the request Declaration func setProxy(_ host: String,_ port: Int,_ username: String? = nil,_ password: String? = nil) Parameter Name Description host The proxy host name port The proxy port number username User name of the proxy password Password of the proxy Return (none) Sample code Set the proxy of the request Source code let proxyHost = \"{YOUR_PROXY_HOST}\" let proxyPort = {YOUR_PROXY_PORT} // Set proxy with auth let proxyUsername = \"{YOUR_PROXY_USERNAME}\" let proxyPassword = \"{YOUR_PROXY_PASSWORD}\" let username = \"{YOUR_USERNAME}\" let password = \"{YOUR_PASSWORD}\" let domain = \"{YOUR_DOMAIN}\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init connection let connection = Connection(domain, auth) // Set proxy without auth connection.setProxy(proxyHost, proxyPort) // Set proxy with auth connection.setProxy(proxyHost, proxyPort, proxyUsername, proxyPassword)","title":"setProxy"},{"location":"reference/file/","text":"File Provide manipulate functions on file: file download & file upload in the kintone app. Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global() Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Initial file class Source code // Init File Module let fileManager = File(con) Methods upload Upload file kintone via Rest API Declaration func upload(_ filePath: String) -> Promise<FileModel> Parameter Name Type Required Description filePath String yes The full path of file on your environment Return Promise<FileModel> Sample code Get app sample Source code let USERNAME = \"your_username\" let PASSWORD = \"your_password\" let DOMAIN = \"your_domain\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(USERNAME, PASSWORD) let con = Connection(DOMAIN, auth) // Init File Module let fileManager = File(con) let recordManager = Record(con) var fileTestRecord: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"testUploadSuccessForSingleFile\") fileTestRecord[fieldCode] = field var fileName = \"test\" var fileExtention = \"txt\" // exec upload and result check let testBundle = Bundle(for: type(of: self)) if let upload_file_path = testBundle.url(forResource: fileName, withExtension: fileExtention){ fileManager.uploadAsync(upload_file_path.absoluteString).then{ fileResponse in // exec add record let fileList = [fileResponse] fileTestRecord = Dictionary<String, FieldValue> = [:] field.setType(FieldType.FILE) field.setValue(fileList) fileTestRecord[\"ATTACH_FILE_1\"] = field recordManager.addRecord(self.APP_ID, fileTestRecord).then{ addResponse -> Promise in let recId = addResponse.getId() return (recordManager.getRecord(self.APP_ID, recId!))! }.then { getResponse in // result check let fileResult: [FileModel] = getResponse.getRecord()![\"ATTACH_FILE_1\"]!.getValue() as! [FileModel] print(fileResult.count) print(fileResult[0].getSize()) print(fileResult[0].getName()) print(fileResult[0].getFileKey()) print(fileResult[0].getContentType()!) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } download Download file kintone via Rest API Declaration func download(_ filekey: String, _ outPutFilePath: String) -> Promise<Void> Parameter Name Type Required Description fileKey String yes The file key of the uploaded file on kintone outPutFilePath String yes The full path of output file on your environment Return Promise<Void> Sample code Get apps sample Source code let USERNAME = \"your_username\" let PASSWORD = \"your_password\" let DOMAIN = \"your_domain\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(USERNAME, PASSWORD) let con = Connection(DOMAIN, auth) // Init File Module let fileManager = File(con) let recordManager = Record(con) var fieldCode = \"SINGLE_LINE_TEXT\" var fileTestRecord: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"testDownloadSuccessForSingleFile\") fileTestRecord[fieldCode] = field // exec upload and result check let testBundle = Bundle(for: type(of: self)) guard let upload_file_path = testBundle.url(forResource: \"test\", withExtension: \"txt\") else { return XCTFail() } self.fileManagement?.uploadAsync(upload_file_path.absoluteString).then{ fileResponse -> Promise in // exec add record let fileList = [fileResponse] fileTestRecord = Dictionary<String, FieldValue> = [:] field.setType(FieldType.FILE) field.setValue(fileList) fileTestRecord[\"ATTACH_FILE_1\"] = field return (self.recordManagement?.addRecord(self.APP_ID, fileTestRecord))! }.then { addResponse -> Promise in let recId = addResponse.getId() return (self.recordManagement?.getRecord(self.APP_ID, recId!))! }.then { getResponse in // exec download file and result check let fileResult: [FileModel] = getResponse.getRecord()![\"ATTACH_FILE_1\"]!.getValue() as! [FileModel] if let dowloadDir = FileManager.default.urls(for: .downloadsDirectory, in: .userDomainMask).first { let pathFileName = dowloadDir.absoluteString + fileResult[0].getName()! self.fileManagement?.downloadAsync((fileResult[0].getFileKey()!), pathFileName) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } } }","title":"File"},{"location":"reference/file/#file","text":"Provide manipulate functions on file: file download & file upload in the kintone app. Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global()","title":"File"},{"location":"reference/file/#constructor","text":"Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Initial file class Source code // Init File Module let fileManager = File(con)","title":"Constructor"},{"location":"reference/file/#methods","text":"","title":"Methods"},{"location":"reference/file/#upload","text":"Upload file kintone via Rest API Declaration func upload(_ filePath: String) -> Promise<FileModel> Parameter Name Type Required Description filePath String yes The full path of file on your environment Return Promise<FileModel> Sample code Get app sample Source code let USERNAME = \"your_username\" let PASSWORD = \"your_password\" let DOMAIN = \"your_domain\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(USERNAME, PASSWORD) let con = Connection(DOMAIN, auth) // Init File Module let fileManager = File(con) let recordManager = Record(con) var fileTestRecord: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"testUploadSuccessForSingleFile\") fileTestRecord[fieldCode] = field var fileName = \"test\" var fileExtention = \"txt\" // exec upload and result check let testBundle = Bundle(for: type(of: self)) if let upload_file_path = testBundle.url(forResource: fileName, withExtension: fileExtention){ fileManager.uploadAsync(upload_file_path.absoluteString).then{ fileResponse in // exec add record let fileList = [fileResponse] fileTestRecord = Dictionary<String, FieldValue> = [:] field.setType(FieldType.FILE) field.setValue(fileList) fileTestRecord[\"ATTACH_FILE_1\"] = field recordManager.addRecord(self.APP_ID, fileTestRecord).then{ addResponse -> Promise in let recId = addResponse.getId() return (recordManager.getRecord(self.APP_ID, recId!))! }.then { getResponse in // result check let fileResult: [FileModel] = getResponse.getRecord()![\"ATTACH_FILE_1\"]!.getValue() as! [FileModel] print(fileResult.count) print(fileResult[0].getSize()) print(fileResult[0].getName()) print(fileResult[0].getFileKey()) print(fileResult[0].getContentType()!) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"upload"},{"location":"reference/file/#download","text":"Download file kintone via Rest API Declaration func download(_ filekey: String, _ outPutFilePath: String) -> Promise<Void> Parameter Name Type Required Description fileKey String yes The file key of the uploaded file on kintone outPutFilePath String yes The full path of output file on your environment Return Promise<Void> Sample code Get apps sample Source code let USERNAME = \"your_username\" let PASSWORD = \"your_password\" let DOMAIN = \"your_domain\" // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(USERNAME, PASSWORD) let con = Connection(DOMAIN, auth) // Init File Module let fileManager = File(con) let recordManager = Record(con) var fieldCode = \"SINGLE_LINE_TEXT\" var fileTestRecord: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"testDownloadSuccessForSingleFile\") fileTestRecord[fieldCode] = field // exec upload and result check let testBundle = Bundle(for: type(of: self)) guard let upload_file_path = testBundle.url(forResource: \"test\", withExtension: \"txt\") else { return XCTFail() } self.fileManagement?.uploadAsync(upload_file_path.absoluteString).then{ fileResponse -> Promise in // exec add record let fileList = [fileResponse] fileTestRecord = Dictionary<String, FieldValue> = [:] field.setType(FieldType.FILE) field.setValue(fileList) fileTestRecord[\"ATTACH_FILE_1\"] = field return (self.recordManagement?.addRecord(self.APP_ID, fileTestRecord))! }.then { addResponse -> Promise in let recId = addResponse.getId() return (self.recordManagement?.getRecord(self.APP_ID, recId!))! }.then { getResponse in // exec download file and result check let fileResult: [FileModel] = getResponse.getRecord()![\"ATTACH_FILE_1\"]!.getValue() as! [FileModel] if let dowloadDir = FileManager.default.urls(for: .downloadsDirectory, in: .userDomainMask).first { let pathFileName = dowloadDir.absoluteString + fileResult[0].getName()! self.fileManagement?.downloadAsync((fileResult[0].getFileKey()!), pathFileName) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } } }","title":"download"},{"location":"reference/kintone-api-exception/","text":"kintoneAPIException Handle error responses from the Kintone Rest API Methods getHttpErrorCode Declaration func getHttpErrorCode() -> Int? Parameter (none) Return int Sample code Get http error code Source code let recordManagement = Record(connection) recordManagement.getRecord(-1, 1).then{response in print(response) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).getHttpErrorCode()!) } } getErrorResponse Declaration func getErrorResponse() -> ErrorResponse? Parameter (none) Return ErrorResponse Sample code Get apps with error response Source code let recordManagement = Record(connection) recordManagement.getRecord(-1, 1).then{response in print(response) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).getErrorResponse().getId()!) print((error as! KintoneAPIException).getErrorResponse().getMessage()!) print((error as! KintoneAPIException).getErrorResponse().getCode()!) } } getErrorResponses Declaration func getErrorResponses() -> Array<ErrorResponse>? Parameter (none) Return ArrayList< ErrorResponse > Sample code Get apps with error responses Source code // Init Bulk request var bulkRequest = BulkRequest(connection); var record: [String: FieldValue] = [:] let fv = FieldValue() fv.setType(FieldType.SINGLE_LINE_TEXT) fv.setValue(\"test_AddRecord\") record[\"Your_Field_Code\"] = fv bulkRequest = try bulkRequest?.addRecord(-1, record) bulkRequest?.execute().catch{error in if error is KintoneAPIException { print((error as! KintoneAPIException).getErrorResponses().toString()!) } else { print((error as! Error).localizedDescription)) } }","title":"Kintone APIException"},{"location":"reference/kintone-api-exception/#kintoneapiexception","text":"Handle error responses from the Kintone Rest API","title":"kintoneAPIException"},{"location":"reference/kintone-api-exception/#methods","text":"","title":"Methods"},{"location":"reference/kintone-api-exception/#gethttperrorcode","text":"Declaration func getHttpErrorCode() -> Int? Parameter (none) Return int Sample code Get http error code Source code let recordManagement = Record(connection) recordManagement.getRecord(-1, 1).then{response in print(response) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).getHttpErrorCode()!) } }","title":"getHttpErrorCode"},{"location":"reference/kintone-api-exception/#geterrorresponse","text":"Declaration func getErrorResponse() -> ErrorResponse? Parameter (none) Return ErrorResponse Sample code Get apps with error response Source code let recordManagement = Record(connection) recordManagement.getRecord(-1, 1).then{response in print(response) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).getErrorResponse().getId()!) print((error as! KintoneAPIException).getErrorResponse().getMessage()!) print((error as! KintoneAPIException).getErrorResponse().getCode()!) } }","title":"getErrorResponse"},{"location":"reference/kintone-api-exception/#geterrorresponses","text":"Declaration func getErrorResponses() -> Array<ErrorResponse>? Parameter (none) Return ArrayList< ErrorResponse > Sample code Get apps with error responses Source code // Init Bulk request var bulkRequest = BulkRequest(connection); var record: [String: FieldValue] = [:] let fv = FieldValue() fv.setType(FieldType.SINGLE_LINE_TEXT) fv.setValue(\"test_AddRecord\") record[\"Your_Field_Code\"] = fv bulkRequest = try bulkRequest?.addRecord(-1, record) bulkRequest?.execute().catch{error in if error is KintoneAPIException { print((error as! KintoneAPIException).getErrorResponses().toString()!) } else { print((error as! Error).localizedDescription)) } }","title":"getErrorResponses"},{"location":"reference/record-cursor/","text":"Record Cursor Provide functions to work with kintone Cursor Currently there's only cursor for records. Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global() Constructor Declaration init(_ connection: Connection?) Parameter Name Description connection Connection Sample code Init record module Source code let username = 'YOUR_USER_NAME' let password = 'YOUR_PASSWORD' let domain = 'YOUR_DOMAIN' // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordCursor = RecordCursor(connection) Methods createCursor Retrieves details of 1 record from an app. Declaration func createCursor(_ app: Int, _ fields: [String]? = nil, _ query: String? = nil, _ size: Int? = 100) -> Promise<CreateRecordCursorResponse> Parameter Name Description app The kintone app ID fields Fields of record to return query Query condition size Number of records to retrieve per request. Default: 100. Maximum: 500. Return Promise< CreateRecordCursorResponse > Sample code Create cursor Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{ rsp in print(rsp.getId()) print(rsp.getTotalCount()) }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) } getRecords Retrieves records from an app. Declaration func getRecords(_ cursorID: String) -> Promise<GetRecordCursorResponse> Parameter Name Description cursorID The cursor ID Return Promise< GetRecordCursorResponse > Sample code Get records Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{createCursorRespone in return (recordCursor.getRecords(createCursorRespone.getId())) }.then{ getRecordsRespone in let records = getRecordsRespone.getRecords() for (_, dval) in (records.enumerated()) { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) } getAllRecords Retrieves all records from an app. Declaration func getAllRecords(_ cursorID: String) -> Promise<GetRecordsResponse> Parameter Name Description cursorID The cursor ID Return Promise< GetRecordsResponse > Sample code Get all records Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{createCursorRespone in return recordCursor.getAllRecords(createCursorRespone.getId()) }.then{ getRecordsRespone in let records = getRecordsRespone.getRecords() for (_, dval) in (records!.enumerated()) { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) } deleteCursor Delete cursor in the app Declaration func deleteCursor(_ cursorID: String) -> Promise<Void> Parameter Name Description cursorID The cursor ID Return Promise<Void> Sample code Delete cursor Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{createCursorRespone in return recordCursor.deleteCursor(createCursorRespone.getId()) }.then{_ in print(\"Deleted cursor\") }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) } Reference Add Cursor Get Cursor Delete Cursor","title":"Record Cursor"},{"location":"reference/record-cursor/#record-cursor","text":"Provide functions to work with kintone Cursor Currently there's only cursor for records. Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global()","title":"Record Cursor"},{"location":"reference/record-cursor/#constructor","text":"","title":"Constructor"},{"location":"reference/record-cursor/#declaration","text":"init(_ connection: Connection?) Parameter Name Description connection Connection Sample code Init record module Source code let username = 'YOUR_USER_NAME' let password = 'YOUR_PASSWORD' let domain = 'YOUR_DOMAIN' // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordCursor = RecordCursor(connection)","title":"Declaration"},{"location":"reference/record-cursor/#methods","text":"","title":"Methods"},{"location":"reference/record-cursor/#createcursor","text":"Retrieves details of 1 record from an app. Declaration func createCursor(_ app: Int, _ fields: [String]? = nil, _ query: String? = nil, _ size: Int? = 100) -> Promise<CreateRecordCursorResponse> Parameter Name Description app The kintone app ID fields Fields of record to return query Query condition size Number of records to retrieve per request. Default: 100. Maximum: 500. Return Promise< CreateRecordCursorResponse > Sample code Create cursor Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{ rsp in print(rsp.getId()) print(rsp.getTotalCount()) }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) }","title":"createCursor"},{"location":"reference/record-cursor/#getrecords","text":"Retrieves records from an app. Declaration func getRecords(_ cursorID: String) -> Promise<GetRecordCursorResponse> Parameter Name Description cursorID The cursor ID Return Promise< GetRecordCursorResponse > Sample code Get records Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{createCursorRespone in return (recordCursor.getRecords(createCursorRespone.getId())) }.then{ getRecordsRespone in let records = getRecordsRespone.getRecords() for (_, dval) in (records.enumerated()) { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) }","title":"getRecords"},{"location":"reference/record-cursor/#getallrecords","text":"Retrieves all records from an app. Declaration func getAllRecords(_ cursorID: String) -> Promise<GetRecordsResponse> Parameter Name Description cursorID The cursor ID Return Promise< GetRecordsResponse > Sample code Get all records Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{createCursorRespone in return recordCursor.getAllRecords(createCursorRespone.getId()) }.then{ getRecordsRespone in let records = getRecordsRespone.getRecords() for (_, dval) in (records!.enumerated()) { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) }","title":"getAllRecords"},{"location":"reference/record-cursor/#deletecursor","text":"Delete cursor in the app Declaration func deleteCursor(_ cursorID: String) -> Promise<Void> Parameter Name Description cursorID The cursor ID Return Promise<Void> Sample code Delete cursor Source code let appID = YOUR_APP_ID let fields = [\"YOUR_FIELD_CODE\"] let query = \"YOUR_QUERY\" let size = 500 recordCursor.createCursor(appID, fields, query, size).then{createCursorRespone in return recordCursor.deleteCursor(createCursorRespone.getId()) }.then{_ in print(\"Deleted cursor\") }.catch{ error in var errorString = \"\" if (type(of: error) == KintoneAPIException.self) { errorString = (error as! KintoneAPIException).toString()! } else { errorString = error.localizedDescription } print(errorString) }","title":"deleteCursor"},{"location":"reference/record-cursor/#reference","text":"Add Cursor Get Cursor Delete Cursor","title":"Reference"},{"location":"reference/record/","text":"Record Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global() Constructor Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init record module Source code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) Methods getRecord Retrieves details of 1 record from an app. Declaration func getRecord(_ app: Int,_ id: Int) -> Promise<GetRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID in kintone app Return Promise<GetRecordResponse> Sample code Get record Source code // execute get record API let appID = {your_app_id} let recordID = {your_record_id} recordManagement.getRecord(appID, recordID).then{response in let resultData: Dictionary<String, FieldValue> = response.getRecord()! print(resultData[\"$id\"]?.getValue()) for (code, value) in resultData { print(value.getType()!) print(value.getValue()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getRecords Retrieves details of multiple records from an app using a query string. Declaration func getRecords(_ app: Int, _ query: String?, _ fields: [String]?, _ totalCount: Bool?) -> Promise<GetRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID query String (optional) The query string that will specify what records will be responded. fields ArrayList<String> (optional) List of field codes you want in the response. totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise<GetRecordsResponse> Sample code Get records Source code let appID = {your_app_id} let query = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\" recordManagement.getRecords(appID, query, nil, true).then{response in let records = response?.getRecords() for (i, dval) in (records?.enumerated())! { for (code, value) in dval { print(value.getType()) print(value.getValue()) } } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getAllRecordsByCursor Retrieves details of multiple records from an app using a query string. Declaration func getAllRecordsByCursor(_ app: Int, _ query: String? = nil, _ fields: [String]? = nil) -> Promise<GetRecordsResponse> Parameter Name Description app The kintone app ID query The query string that will specify what records will be responded. fields List of field codes you want in the response. Return Promise< GetRecordsResponse > Sample code Get all record by cursor Source code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth var auth = Auth() auth = auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // execute get records API let appID = {your_app_id} let query = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\" recordManagement.getAllRecordsByCursor(appID, query, nil).then{response in let records = response.getRecords() for (_, dval) in (records?.enumerated())! { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print(error.localizedDescription) } } getAllRecordsByQuery Get all records from an app by using a query string. Declaration func getAllRecordsByQuery(_ app: Int,_ query: String? = \"\",_ fields: [String]? = [],_ totalCount: Bool = false) -> Promise<GetRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID query String (optional) The query string that will specify what records will be responded. fields Array<String> (optional) List of field codes you want in the response. totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise<GetRecordsResponse> Sample code Get all records by query Source code let appID = {YOUR_APP_ID} let query = \"{YOUR_QUERY}\" recordManagement.getAllRecordsByQuery(appID, query, nil, true).then {response in let records = response.getRecords() for (_, dval) in (records?.enumerated())! { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error).localizedDescription) } } addRecord Add one record to an app. Declaration func addRecord(_ app: Int, _ record: [String:FieldValue]?) -> Promise<AddRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID record Dictionary<String, FieldValue> (optional) The record data to be add to kintone app. About the format, please look the sample below or reference at the end of this page Return Promise<AddRecordResponse> Sample code Add record Source code var addData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value\") addData[{your_field_code}] = field // execute add record API let appID = {your_app_id} recordManagement.addRecord(appID, addData).then{response in print(response.getId()) print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } addRecords Add multiple records to an app. Declaration func addRecords(_ app: Int, _ records: [[String:FieldValue]]) -> Promise<AddRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID records ArrayList<Dictionary<String, FieldValue>> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<AddRecordsResponse> Sample code Add multi records Source code var addData1: Dictionary<String, FieldValue> = [:] var addData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Value1\") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Value2\") addData1[{your_field_code}] = field1 addData2[{your_field_code}] = field2 var addDataList = [addData1, addData2] // execute add records API let appID = 311 recordManagement.addRecords(appID, addDataList).then{response in print(response!.getIDs()) print(response!.getRevisions()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } addAllRecords Add all records to an app. Declaration func addAllRecords (_ app: Int, _ records: [[String:FieldValue]] ) -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID records List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<BulkRequestResponse> Sample code Add multi records Source code var addData1: Dictionary<String, FieldValue> = [:] var addData2: Dictionary<String, FieldValue> = [:] let field1 = FieldValue() let field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Value1\") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Value2\") addData1[{your_field_code}] = field1 addData2[{your_field_code}] = field2 let addDataList = [addData1, addData2] // execute add records API let appID = 311 recordManagement.addAllRecords(appID, addDataList).then{response in for items in response.getResults()! { let addRecordsResponse = items as! [AddRecordsResponse] for _ in addRecordsResponse { print(response.getResults()!) } } }.catch{ error in var errorString = \"\" if (type(of: error) == BulksException.self) { errorString = (error as! BulksException).getError()! } else { errorString = error.localizedDescription } print(errorString) } updateRecordByID Updates details of 1 record in an app by specifying its record number. Declaration func updateRecordByID(_ app: Int, _ id: Int, _ record: [String:FieldValue]?, _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID on kintone app record Dictionary<String, FieldValue> yes The record data to be updated in the kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise<UpdateRecordResponse> Sample code Update record by ID Source code var updateData:Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update\") updateData[{your_field_code}] = field // execute update record API let appID = {your_app_id} let updRecID = {your_record_id} recordManagement.updateRecordByID(appID, updRecID, updateData , nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateRecordByUpdateKey Updates details of 1 record in an app by the unique key. Declaration func updateRecordByUpdateKey(_ app: Int, _ updateKey: RecordUpdateKey, _ record: [String:FieldValue]?, _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID updateKey RecordUpdateKey yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. record Dictionary<String, FieldValue> yes The record data will be added to the kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise<UpdateRecordResponse> Sample code Update record by UpdateKey Source code var updateData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") updateData[{your_field_code}] = field // create update key let updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\") // execute update record API let appID = {your_app_id} recordManagement.updateRecordByUpdateKey(appID, updKey, updateData, nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateRecords Updates details of multiple records in an app, by specifying their record number, or a different unique key. Declaration func updateRecords(_ app: Int, _ records: [RecordUpdateItem]) -> Promise<UpdateRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID records ArrayList<RecordUpdateItem> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<UpdateRecordsResponse> Sample code Update multi records Source code var recId1 = {your_record_id} var recId2 = {your_record_id} var updateData1: Dictionary<String, FieldValue> = [:] var updateData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Update Value1 \") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Update Value2\") updateData1[{your_field_code}] = field1 updateData2[{your_field_code}] = field2 var updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1) var updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2) let updateItemList = [updateDataItem1 , updateDataItem2] // execute update records API let appID = {your_app_id} recordManagement.updateRecords(appID, updateItemList).then{response in for value in (response!.getRecords())! { print(value.getID()) print(value.getRevision()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateAllRecords Updates details of all records in an app. Declaration func updateAllRecords (_ app: Int, _ records: [RecordUpdateItem]) -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID records The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<BulkRequestResponse> Sample code Update multi records Source code let recId1 = {your_record_id} let recId2 = {your_record_id} var updateData1: Dictionary<String, FieldValue> = [:] var updateData2: Dictionary<String, FieldValue> = [:] let field1 = FieldValue() let field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Update Value1 \") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Update Value2\") updateData1[{your_field_code}] = field1 updateData2[{your_field_code}] = field2 let updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1) let updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2) let updateItemList = [updateDataItem1 , updateDataItem2] // execute update records API let appID = {your_app_id} recordManagement.updateAllRecords(appID, updateItemList).then{response in for result in response.getResults()! { let updateRecordsResponse = result as! [UpdateRecordsResponse] for item in updateRecordsResponse { for record in item.getRecords()! { print(record.getID() as Any) print(record.getRevision() as Any) } } } }.catch{ error in var errorString = \"\" if (type(of: error) == BulksException.self) { errorString = (error as! BulksException).getError()! } else { errorString = error.localizedDescription } print(errorString) } deleteRecords(_ app: Int, _ ids: [Int]) Deletes multiple records in an app. Declaration func deleteRecords(_ app: Int, _ ids: [Int]) -> Promise<Void> Parameter Name Type Required Description app Integer yes The kintone app ID ids ArrayList<Integer> yes The list ids of record will be delete. Return Promise<Void> Sample code Delete multi record Source code let appID = {your_app_id} let delRecordID1 = {your_record_id1} let delRecordID2 = {your_record_id2} let delIdList = [delRecordID1, delRecordID2] recordManagement.deleteRecords(appID, delIdList) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } deleteAllRecordsByQuery Delete all records by indicating query. Can delete over 2000 records, but can't do rollback. Declaration func deleteAllRecordsByQuery(_ app: Int,_ query: String? = \"\") -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID query The query string that will specify what records will be responded. If nothing is specified, fields will be returned from all accessible records. The query detail can't indicate limit and offset. Return Promise<BulkRequestResponse> Sample code Delete all records by query Source code let appID = {YOUR_APP_ID} let query = \"{YOUR_QUERY}\" recordManagement.deleteAllRecordsByQuery(appID, query) .then { resp in let results = resp.getResults() print(results!) }.catch{ error in if error is BulksException { print((error as! BulksException).getError()!); } else { print(error.localizedDescription) } } deleteRecordsWithRevision Deletes multiple records in an app with revision. Declaration func deleteRecordsWithRevision(_ app: Int, _ idsWithRevision: [Int:Int?]) -> Promise<Void> Parameter Name Type Required Description app Integer yes The kintone app ID idsWithRevision Dictionary<Integer, Integer> yes ( key : The Id of record , value : The Revision of record. ) Return Promise<Void> Sample code Delete record with revision Source code let appID = {your_app_id} var delIdAndRevision: Dictionary<Int, Int> = [:] delIdAndRevision[{your_record_id}] = {your_revision_id} delIdAndRevision[{your_record_id}] = {your_revision_id} recordManagement.deleteRecordsWithRevision(appID, delIdAndRevision) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateRecordAssignees Update assignees of a record. Declaration func updateRecordAssignees(_ app: Int, _ id: Int, _ assignees: [String], _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID of kintone app assignees ArrayList<String> yes The user code(s) of the assignee(s) revision Integer (option) The revision number of record Return Promise<UpdateRecordResponse> Sample code update record Assignees Source code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // execute update assignees API let appID = {your_app_od} let updRecID = {your_record_id} let assignees = [\"{your_user_code}\"] recordManagement.updateRecordAssignees(appID, updRecID, assignees, nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateRecordStatus Updates the Status of a record of an app. Declaration func updateRecordStatus(_ app: Int, _ id: Int, _ action: String, _ assignee: String?, _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID. id Integer yes The record ID on the kintone app. action String yes The Action name will be run. assignee String (Conditionally required) The next Assignee. Specify the Assignee's login name. Required if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. revision Integer (optional) The revision of record Return Promise<UpdateRecordResponse> Sample code Update record status Source code let appID = {your_app_id} let updRecID = {your_record_id} let assignees = \"{your_user_code}\" let status = \"{your_status}\" recordManagement.updateRecordStatus(appID, updRecID, status, assignees, nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } updateRecordsStatus Updates the Status of multiple records of an app. Declaration func updateRecordsStatus(_ app: Int, _ records: [RecordUpdateStatusItem]) -> Promise<UpdateRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID records ArrayList<RecordUpdateStatusItem> yes The recod status data. See belowsample codee or reference at the end of this page to know format. Return Promise<UpdateRecordsResponse> Sample code Update multi record status Source code let appID = {your_app_id} let updRecID1 = {your_record_id1} let updRecID2 = {your_record_id2} let assignees1 = [{your_login_code1}] let assignees2 = [{your_login_code2}] let status1 = {your_update_status1} let status2 = {your_update_status2} let item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil) let item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil) let itemList = [item1, item2] recordManagement.updateRecordsStatus(appID, itemList).then{response in for value in (response!.getRecords())! { print(value.getID()) print(value.getRevision()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } getComments Declaration func getComments(_ app: Int, _ record: Int, _ order: String?, _ offset: Int?, _ limit: Int?) -> Promise<GetCommentsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The kintone app ID order String (optional) The sort order of the Comment ID. Please select asc or desc offset Integer (optional) The number of first comments will be ignored. limit Integer (optional) The number of records to retrieve. Return Promise<GetCommentsResponse> Sample code Get comments Source code let appID = {your_app_id} let recordID = {your_record_id} var response: GetCommentsResponse? = nil recordManagement.getComments(appID, recordID, nil, nil, nil).then{response in for value in (response.getComments())! { print(value.getId()) print(value.getCreatedAt()) print(value.getText()) print(value.getCreator()?.code) print(value.getMentions()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } addComment Declaration func addComment(_ app: Int, _ record: Int, _ comment: CommentContent) -> Promise<AddCommentResponse> Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The kintone app ID comment CommentContent yes About the format, please look the sample below or reference at the end of this page. Return Promise<AddCommentResponse> Sample code Add comment Source code let mention = CommentMention() let comment = CommentContent() mention.setCode(\"cybozu\") mention.setType(\"USER\") let mentionList = [mention] comment.setText(\"add comment\") comment.setMentions(mentionList) // execute get comments API let appID = {your_app_id} let recordID = {your_record_id} recordManagement.addComment(appID, recordID, comment).then{response in print(response.getId()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } deleteComment Declaration func deleteComment(_ app: Int, _ record: Int, _ comment: Int) -> Promise<Void> Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The record ID on kintone app comment Integer yes The comment ID on kintone record Return Promise<Void> Sample code Delete comment Source code let appId = {your_app_id} let recordId = {your_record_id} let commentId = {your_comment_Id} recordManagement.deleteComment(appId, recordId, commentId) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } } upsertRecord Insert or update a record to kintone app. Insert the record if the updateKey doesn't exist and update the record if the updateKey exists. Declaration func upsertRecord(_ app: Int, _ updateKey: RecordUpdateKey, _ record: [String:FieldValue], _ revision: Int? = -1) -> Promise<AddRecordResponse> or Promise<UpdateRecordResponse> Parameter Name Description app The kintone app ID updateKey The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. record The record data will be added to the kintone app. About the format, please look the sample below or reference at the end of this page. revision The expected revision number. If the value does not match, an error will occur and the record will not be updated. If the value is not specified or is -1, the revision number will not be checked. Return Promise<AddRecordResponse> or Promise<UpdateRecordResponse> Sample code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth var auth = Auth() auth = auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // Init data var upsertData: Dictionary<String, FieldValue> = [:] let field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") upsertData[{your_field_code}] = field // create update key let updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\") // execute update record API let appID = {your_app_id} recordManagement.upsertRecord(appID, updKey, upsertData, nil).then{response in if let addResponse = response as? AddRecordResponse { print(addResponse.getRevision()) } else if let updateResponse = response as? UpdateRecordResponse { print(updateResponse.getRevision()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print(error.localizedDescription) } } upsertRecords Insert or update up to 1500 records to kintone app. If the records are over 1500, It is thrown Error. Insert the records if the updateKey doesn't exist and update the records if the updateKey exists. Declaration func upsertRecords(_ app: Int, _ records: [RecordUpsertItem]) -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID records The record data Array which has updateKey and record. About the format, please look the sample below or reference at the end of this page. Return Promise<BulkRequestResponse> Sample code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth var auth = Auth() auth = auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // create update key let updKey1 = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let updKey2 = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let updKey3 = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") var record1: Dictionary<String, FieldValue> = [:] var record2: Dictionary<String, FieldValue> = [:] var record3: Dictionary<String, FieldValue> = [:] record1[{your_field_code}] = field record2[{your_field_code}] = field record3[{your_field_code}] = field let recordUpsertItem1 = RecordUpsertItem(updKey1, record1) let recordUpsertItem2 = RecordUpsertItem(updKey2, record2) let recordUpsertItem3 = RecordUpsertItem(updKey3, record3) var upsertRecords: [RecordUpsertItem] = [] upsertRecords.append(recordUpsertItem1) upsertRecords.append(recordUpsertItem2) upsertRecords.append(recordUpsertItem3) // execute update record API let appID = {your_app_id} recordManagement.upsertRecords(appID, upsertRecords).then{response in print(response) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print(error.localizedDescription) } } Reference Get Record Add Record Update Record Delete Record Get Comments Add Comment Delete Comment Update Record Status Update Record Assignees","title":"Record"},{"location":"reference/record/#record","text":"Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app Warning The user must set the promises to global to use the module: DispatchQueue.promise = .global()","title":"Record"},{"location":"reference/record/#constructor","text":"Parameter Name Type Required Description connection Connection yes The connection module of this SDK. Sample code Init record module Source code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection)","title":"Constructor"},{"location":"reference/record/#methods","text":"","title":"Methods"},{"location":"reference/record/#getrecord","text":"Retrieves details of 1 record from an app. Declaration func getRecord(_ app: Int,_ id: Int) -> Promise<GetRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID in kintone app Return Promise<GetRecordResponse> Sample code Get record Source code // execute get record API let appID = {your_app_id} let recordID = {your_record_id} recordManagement.getRecord(appID, recordID).then{response in let resultData: Dictionary<String, FieldValue> = response.getRecord()! print(resultData[\"$id\"]?.getValue()) for (code, value) in resultData { print(value.getType()!) print(value.getValue()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getRecord"},{"location":"reference/record/#getrecords","text":"Retrieves details of multiple records from an app using a query string. Declaration func getRecords(_ app: Int, _ query: String?, _ fields: [String]?, _ totalCount: Bool?) -> Promise<GetRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID query String (optional) The query string that will specify what records will be responded. fields ArrayList<String> (optional) List of field codes you want in the response. totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise<GetRecordsResponse> Sample code Get records Source code let appID = {your_app_id} let query = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\" recordManagement.getRecords(appID, query, nil, true).then{response in let records = response?.getRecords() for (i, dval) in (records?.enumerated())! { for (code, value) in dval { print(value.getType()) print(value.getValue()) } } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getRecords"},{"location":"reference/record/#getallrecordsbycursor","text":"Retrieves details of multiple records from an app using a query string. Declaration func getAllRecordsByCursor(_ app: Int, _ query: String? = nil, _ fields: [String]? = nil) -> Promise<GetRecordsResponse> Parameter Name Description app The kintone app ID query The query string that will specify what records will be responded. fields List of field codes you want in the response. Return Promise< GetRecordsResponse > Sample code Get all record by cursor Source code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth var auth = Auth() auth = auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // execute get records API let appID = {your_app_id} let query = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\" recordManagement.getAllRecordsByCursor(appID, query, nil).then{response in let records = response.getRecords() for (_, dval) in (records?.enumerated())! { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print(error.localizedDescription) } }","title":"getAllRecordsByCursor"},{"location":"reference/record/#getallrecordsbyquery","text":"Get all records from an app by using a query string. Declaration func getAllRecordsByQuery(_ app: Int,_ query: String? = \"\",_ fields: [String]? = [],_ totalCount: Bool = false) -> Promise<GetRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID query String (optional) The query string that will specify what records will be responded. fields Array<String> (optional) List of field codes you want in the response. totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise<GetRecordsResponse> Sample code Get all records by query Source code let appID = {YOUR_APP_ID} let query = \"{YOUR_QUERY}\" recordManagement.getAllRecordsByQuery(appID, query, nil, true).then {response in let records = response.getRecords() for (_, dval) in (records?.enumerated())! { for (_, value) in dval { print(value.getType() as Any) print(value.getValue() as Any) } } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error).localizedDescription) } }","title":"getAllRecordsByQuery"},{"location":"reference/record/#addrecord","text":"Add one record to an app. Declaration func addRecord(_ app: Int, _ record: [String:FieldValue]?) -> Promise<AddRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID record Dictionary<String, FieldValue> (optional) The record data to be add to kintone app. About the format, please look the sample below or reference at the end of this page Return Promise<AddRecordResponse> Sample code Add record Source code var addData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value\") addData[{your_field_code}] = field // execute add record API let appID = {your_app_id} recordManagement.addRecord(appID, addData).then{response in print(response.getId()) print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"addRecord"},{"location":"reference/record/#addrecords","text":"Add multiple records to an app. Declaration func addRecords(_ app: Int, _ records: [[String:FieldValue]]) -> Promise<AddRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID records ArrayList<Dictionary<String, FieldValue>> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<AddRecordsResponse> Sample code Add multi records Source code var addData1: Dictionary<String, FieldValue> = [:] var addData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Value1\") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Value2\") addData1[{your_field_code}] = field1 addData2[{your_field_code}] = field2 var addDataList = [addData1, addData2] // execute add records API let appID = 311 recordManagement.addRecords(appID, addDataList).then{response in print(response!.getIDs()) print(response!.getRevisions()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"addRecords"},{"location":"reference/record/#addallrecords","text":"Add all records to an app. Declaration func addAllRecords (_ app: Int, _ records: [[String:FieldValue]] ) -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID records List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<BulkRequestResponse> Sample code Add multi records Source code var addData1: Dictionary<String, FieldValue> = [:] var addData2: Dictionary<String, FieldValue> = [:] let field1 = FieldValue() let field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Value1\") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Value2\") addData1[{your_field_code}] = field1 addData2[{your_field_code}] = field2 let addDataList = [addData1, addData2] // execute add records API let appID = 311 recordManagement.addAllRecords(appID, addDataList).then{response in for items in response.getResults()! { let addRecordsResponse = items as! [AddRecordsResponse] for _ in addRecordsResponse { print(response.getResults()!) } } }.catch{ error in var errorString = \"\" if (type(of: error) == BulksException.self) { errorString = (error as! BulksException).getError()! } else { errorString = error.localizedDescription } print(errorString) }","title":"addAllRecords"},{"location":"reference/record/#updaterecordbyid","text":"Updates details of 1 record in an app by specifying its record number. Declaration func updateRecordByID(_ app: Int, _ id: Int, _ record: [String:FieldValue]?, _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID on kintone app record Dictionary<String, FieldValue> yes The record data to be updated in the kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise<UpdateRecordResponse> Sample code Update record by ID Source code var updateData:Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update\") updateData[{your_field_code}] = field // execute update record API let appID = {your_app_id} let updRecID = {your_record_id} recordManagement.updateRecordByID(appID, updRecID, updateData , nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateRecordByID"},{"location":"reference/record/#updaterecordbyupdatekey","text":"Updates details of 1 record in an app by the unique key. Declaration func updateRecordByUpdateKey(_ app: Int, _ updateKey: RecordUpdateKey, _ record: [String:FieldValue]?, _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID updateKey RecordUpdateKey yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. record Dictionary<String, FieldValue> yes The record data will be added to the kintone app. About the format, please look the sample below or reference at the end of this page. revision Integer (optional) The revision number of record Return Promise<UpdateRecordResponse> Sample code Update record by UpdateKey Source code var updateData: Dictionary<String, FieldValue> = [:] var field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") updateData[{your_field_code}] = field // create update key let updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\") // execute update record API let appID = {your_app_id} recordManagement.updateRecordByUpdateKey(appID, updKey, updateData, nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateRecordByUpdateKey"},{"location":"reference/record/#updaterecords","text":"Updates details of multiple records in an app, by specifying their record number, or a different unique key. Declaration func updateRecords(_ app: Int, _ records: [RecordUpdateItem]) -> Promise<UpdateRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID records ArrayList<RecordUpdateItem> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<UpdateRecordsResponse> Sample code Update multi records Source code var recId1 = {your_record_id} var recId2 = {your_record_id} var updateData1: Dictionary<String, FieldValue> = [:] var updateData2: Dictionary<String, FieldValue> = [:] var field1 = FieldValue() var field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Update Value1 \") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Update Value2\") updateData1[{your_field_code}] = field1 updateData2[{your_field_code}] = field2 var updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1) var updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2) let updateItemList = [updateDataItem1 , updateDataItem2] // execute update records API let appID = {your_app_id} recordManagement.updateRecords(appID, updateItemList).then{response in for value in (response!.getRecords())! { print(value.getID()) print(value.getRevision()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateRecords"},{"location":"reference/record/#updateallrecords","text":"Updates details of all records in an app. Declaration func updateAllRecords (_ app: Int, _ records: [RecordUpdateItem]) -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID records The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise<BulkRequestResponse> Sample code Update multi records Source code let recId1 = {your_record_id} let recId2 = {your_record_id} var updateData1: Dictionary<String, FieldValue> = [:] var updateData2: Dictionary<String, FieldValue> = [:] let field1 = FieldValue() let field2 = FieldValue() field1.setType(FieldType.SINGLE_LINE_TEXT) field1.setValue(\"Test Update Value1 \") field2.setType(FieldType.SINGLE_LINE_TEXT) field2.setValue(\"Test Update Value2\") updateData1[{your_field_code}] = field1 updateData2[{your_field_code}] = field2 let updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1) let updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2) let updateItemList = [updateDataItem1 , updateDataItem2] // execute update records API let appID = {your_app_id} recordManagement.updateAllRecords(appID, updateItemList).then{response in for result in response.getResults()! { let updateRecordsResponse = result as! [UpdateRecordsResponse] for item in updateRecordsResponse { for record in item.getRecords()! { print(record.getID() as Any) print(record.getRevision() as Any) } } } }.catch{ error in var errorString = \"\" if (type(of: error) == BulksException.self) { errorString = (error as! BulksException).getError()! } else { errorString = error.localizedDescription } print(errorString) }","title":"updateAllRecords"},{"location":"reference/record/#deleterecords_-app-int-_-ids-int","text":"Deletes multiple records in an app. Declaration func deleteRecords(_ app: Int, _ ids: [Int]) -> Promise<Void> Parameter Name Type Required Description app Integer yes The kintone app ID ids ArrayList<Integer> yes The list ids of record will be delete. Return Promise<Void> Sample code Delete multi record Source code let appID = {your_app_id} let delRecordID1 = {your_record_id1} let delRecordID2 = {your_record_id2} let delIdList = [delRecordID1, delRecordID2] recordManagement.deleteRecords(appID, delIdList) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"deleteRecords(_ app: Int, _ ids: [Int])"},{"location":"reference/record/#deleteallrecordsbyquery","text":"Delete all records by indicating query. Can delete over 2000 records, but can't do rollback. Declaration func deleteAllRecordsByQuery(_ app: Int,_ query: String? = \"\") -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID query The query string that will specify what records will be responded. If nothing is specified, fields will be returned from all accessible records. The query detail can't indicate limit and offset. Return Promise<BulkRequestResponse> Sample code Delete all records by query Source code let appID = {YOUR_APP_ID} let query = \"{YOUR_QUERY}\" recordManagement.deleteAllRecordsByQuery(appID, query) .then { resp in let results = resp.getResults() print(results!) }.catch{ error in if error is BulksException { print((error as! BulksException).getError()!); } else { print(error.localizedDescription) } }","title":"deleteAllRecordsByQuery"},{"location":"reference/record/#deleterecordswithrevision","text":"Deletes multiple records in an app with revision. Declaration func deleteRecordsWithRevision(_ app: Int, _ idsWithRevision: [Int:Int?]) -> Promise<Void> Parameter Name Type Required Description app Integer yes The kintone app ID idsWithRevision Dictionary<Integer, Integer> yes ( key : The Id of record , value : The Revision of record. ) Return Promise<Void> Sample code Delete record with revision Source code let appID = {your_app_id} var delIdAndRevision: Dictionary<Int, Int> = [:] delIdAndRevision[{your_record_id}] = {your_revision_id} delIdAndRevision[{your_record_id}] = {your_revision_id} recordManagement.deleteRecordsWithRevision(appID, delIdAndRevision) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"deleteRecordsWithRevision"},{"location":"reference/record/#updaterecordassignees","text":"Update assignees of a record. Declaration func updateRecordAssignees(_ app: Int, _ id: Int, _ assignees: [String], _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID id Integer yes The record ID of kintone app assignees ArrayList<String> yes The user code(s) of the assignee(s) revision Integer (option) The revision number of record Return Promise<UpdateRecordResponse> Sample code update record Assignees Source code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth let auth = Auth() auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // execute update assignees API let appID = {your_app_od} let updRecID = {your_record_id} let assignees = [\"{your_user_code}\"] recordManagement.updateRecordAssignees(appID, updRecID, assignees, nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateRecordAssignees"},{"location":"reference/record/#updaterecordstatus","text":"Updates the Status of a record of an app. Declaration func updateRecordStatus(_ app: Int, _ id: Int, _ action: String, _ assignee: String?, _ revision: Int?) -> Promise<UpdateRecordResponse> Parameter Name Type Required Description app Integer yes The kintone app ID. id Integer yes The record ID on the kintone app. action String yes The Action name will be run. assignee String (Conditionally required) The next Assignee. Specify the Assignee's login name. Required if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. revision Integer (optional) The revision of record Return Promise<UpdateRecordResponse> Sample code Update record status Source code let appID = {your_app_id} let updRecID = {your_record_id} let assignees = \"{your_user_code}\" let status = \"{your_status}\" recordManagement.updateRecordStatus(appID, updRecID, status, assignees, nil).then{response in print(response.getRevision()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateRecordStatus"},{"location":"reference/record/#updaterecordsstatus","text":"Updates the Status of multiple records of an app. Declaration func updateRecordsStatus(_ app: Int, _ records: [RecordUpdateStatusItem]) -> Promise<UpdateRecordsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID records ArrayList<RecordUpdateStatusItem> yes The recod status data. See belowsample codee or reference at the end of this page to know format. Return Promise<UpdateRecordsResponse> Sample code Update multi record status Source code let appID = {your_app_id} let updRecID1 = {your_record_id1} let updRecID2 = {your_record_id2} let assignees1 = [{your_login_code1}] let assignees2 = [{your_login_code2}] let status1 = {your_update_status1} let status2 = {your_update_status2} let item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil) let item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil) let itemList = [item1, item2] recordManagement.updateRecordsStatus(appID, itemList).then{response in for value in (response!.getRecords())! { print(value.getID()) print(value.getRevision()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"updateRecordsStatus"},{"location":"reference/record/#getcomments","text":"Declaration func getComments(_ app: Int, _ record: Int, _ order: String?, _ offset: Int?, _ limit: Int?) -> Promise<GetCommentsResponse> Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The kintone app ID order String (optional) The sort order of the Comment ID. Please select asc or desc offset Integer (optional) The number of first comments will be ignored. limit Integer (optional) The number of records to retrieve. Return Promise<GetCommentsResponse> Sample code Get comments Source code let appID = {your_app_id} let recordID = {your_record_id} var response: GetCommentsResponse? = nil recordManagement.getComments(appID, recordID, nil, nil, nil).then{response in for value in (response.getComments())! { print(value.getId()) print(value.getCreatedAt()) print(value.getText()) print(value.getCreator()?.code) print(value.getMentions()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"getComments"},{"location":"reference/record/#addcomment","text":"Declaration func addComment(_ app: Int, _ record: Int, _ comment: CommentContent) -> Promise<AddCommentResponse> Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The kintone app ID comment CommentContent yes About the format, please look the sample below or reference at the end of this page. Return Promise<AddCommentResponse> Sample code Add comment Source code let mention = CommentMention() let comment = CommentContent() mention.setCode(\"cybozu\") mention.setType(\"USER\") let mentionList = [mention] comment.setText(\"add comment\") comment.setMentions(mentionList) // execute get comments API let appID = {your_app_id} let recordID = {your_record_id} recordManagement.addComment(appID, recordID, comment).then{response in print(response.getId()) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"addComment"},{"location":"reference/record/#deletecomment","text":"Declaration func deleteComment(_ app: Int, _ record: Int, _ comment: Int) -> Promise<Void> Parameter Name Type Required Description app Integer yes The kintone app ID record Integer yes The record ID on kintone app comment Integer yes The comment ID on kintone record Return Promise<Void> Sample code Delete comment Source code let appId = {your_app_id} let recordId = {your_record_id} let commentId = {your_comment_Id} recordManagement.deleteComment(appId, recordId, commentId) .catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print((error as! Error).localizedDescription) } }","title":"deleteComment"},{"location":"reference/record/#upsertrecord","text":"Insert or update a record to kintone app. Insert the record if the updateKey doesn't exist and update the record if the updateKey exists. Declaration func upsertRecord(_ app: Int, _ updateKey: RecordUpdateKey, _ record: [String:FieldValue], _ revision: Int? = -1) -> Promise<AddRecordResponse> or Promise<UpdateRecordResponse> Parameter Name Description app The kintone app ID updateKey The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. record The record data will be added to the kintone app. About the format, please look the sample below or reference at the end of this page. revision The expected revision number. If the value does not match, an error will occur and the record will not be updated. If the value is not specified or is -1, the revision number will not be checked. Return Promise<AddRecordResponse> or Promise<UpdateRecordResponse> Sample code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth var auth = Auth() auth = auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // Init data var upsertData: Dictionary<String, FieldValue> = [:] let field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") upsertData[{your_field_code}] = field // create update key let updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\") // execute update record API let appID = {your_app_id} recordManagement.upsertRecord(appID, updKey, upsertData, nil).then{response in if let addResponse = response as? AddRecordResponse { print(addResponse.getRevision()) } else if let updateResponse = response as? UpdateRecordResponse { print(updateResponse.getRevision()) } }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print(error.localizedDescription) } }","title":"upsertRecord"},{"location":"reference/record/#upsertrecords","text":"Insert or update up to 1500 records to kintone app. If the records are over 1500, It is thrown Error. Insert the records if the updateKey doesn't exist and update the records if the updateKey exists. Declaration func upsertRecords(_ app: Int, _ records: [RecordUpsertItem]) -> Promise<BulkRequestResponse> Parameter Name Description app The kintone app ID records The record data Array which has updateKey and record. About the format, please look the sample below or reference at the end of this page. Return Promise<BulkRequestResponse> Sample code let username = {your_user_name} let password = {your_user_password} let domain = {your_domain} // Init authenticationAuth var auth = Auth() auth = auth.setPasswordAuth(username, password) // Init Connection without \"guest space ID\" let connection = Connection(domain, auth) // Init Record Module let recordManagement = Record(connection) // create update key let updKey1 = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let updKey2 = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let updKey3 = RecordUpdateKey(\"{your_field_code}\", \"update key value\") let field = FieldValue() field.setType(FieldType.SINGLE_LINE_TEXT) field.setValue(\"Test Value Update For Key\") var record1: Dictionary<String, FieldValue> = [:] var record2: Dictionary<String, FieldValue> = [:] var record3: Dictionary<String, FieldValue> = [:] record1[{your_field_code}] = field record2[{your_field_code}] = field record3[{your_field_code}] = field let recordUpsertItem1 = RecordUpsertItem(updKey1, record1) let recordUpsertItem2 = RecordUpsertItem(updKey2, record2) let recordUpsertItem3 = RecordUpsertItem(updKey3, record3) var upsertRecords: [RecordUpsertItem] = [] upsertRecords.append(recordUpsertItem1) upsertRecords.append(recordUpsertItem2) upsertRecords.append(recordUpsertItem3) // execute update record API let appID = {your_app_id} recordManagement.upsertRecords(appID, upsertRecords).then{response in print(response) }.catch{ error in if error is KintoneAPIException { print((error as! KintoneAPIException).toString()!) } else { print(error.localizedDescription) } }","title":"upsertRecords"},{"location":"reference/record/#reference","text":"Get Record Add Record Update Record Delete Record Get Comments Add Comment Delete Comment Update Record Status Update Record Assignees","title":"Reference"},{"location":"reference/model/app/basic-response/","text":"BasicResponse The basic response Constructor Parameter Name Type Description revision Integer The revision of the app Methods getRevision The revision of the app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"BasicResponse"},{"location":"reference/model/app/basic-response/#basicresponse","text":"The basic response","title":"BasicResponse"},{"location":"reference/model/app/basic-response/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/basic-response/#parameter","text":"Name Type Description revision Integer The revision of the app","title":"Parameter"},{"location":"reference/model/app/basic-response/#methods","text":"","title":"Methods"},{"location":"reference/model/app/basic-response/#getrevision","text":"The revision of the app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/app/app/app-deploy-status/","text":"AppDeployStatus Get information about the deploy status of an app Constructor Parameter Name Type Description app Integer The appId status Status The status of the deployment of App settings. Methods getApp Get the appId Declaration func getApp() -> Int? Parameter (none) Return Integer getStatus The status of the deployment of App settings. Declaration func getStatus() -> Status? Parameter (none) Return Status Enum Status Name Type Value Description PROCESSING String PROCESSING The App settings are being deployed. SUCCESS String SUCCESS The App settings have been deployed. FAIL String FAIL An error occurred, and the deployment of App settings failed. CANCEL String CANCEL The deployment of App settings was canceled, due to the deployment of other App settings failing.","title":"AppDeployStatus"},{"location":"reference/model/app/app/app-deploy-status/#appdeploystatus","text":"Get information about the deploy status of an app","title":"AppDeployStatus"},{"location":"reference/model/app/app/app-deploy-status/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/app/app-deploy-status/#parameter","text":"Name Type Description app Integer The appId status Status The status of the deployment of App settings.","title":"Parameter"},{"location":"reference/model/app/app/app-deploy-status/#methods","text":"","title":"Methods"},{"location":"reference/model/app/app/app-deploy-status/#getapp","text":"Get the appId Declaration func getApp() -> Int? Parameter (none) Return Integer","title":"getApp"},{"location":"reference/model/app/app/app-deploy-status/#getstatus","text":"The status of the deployment of App settings. Declaration func getStatus() -> Status? Parameter (none) Return Status","title":"getStatus"},{"location":"reference/model/app/app/app-deploy-status/#enum","text":"","title":"Enum"},{"location":"reference/model/app/app/app-deploy-status/#status","text":"Name Type Value Description PROCESSING String PROCESSING The App settings are being deployed. SUCCESS String SUCCESS The App settings have been deployed. FAIL String FAIL An error occurred, and the deployment of App settings failed. CANCEL String CANCEL The deployment of App settings was canceled, due to the deployment of other App settings failing.","title":"Status"},{"location":"reference/model/app/app/app-model/","text":"AppModel Gets the basic information about the app. Permissions to view the App is needed. API Tokens cannot be used with this API. Constructor Parameter (none) Methods getAppId Get the appId Declaration func getAppId() -> Int? Parameter (none) Return Integer getCode Get the code Declaration func getCode() -> String? Parameter (none) Return String getName Get the name Declaration func getName() -> String? Parameter (none) Return String getDescription Get the description Declaration func getDescription() -> String? Parameter (none) Return String getSpaceId Get the spaceId Declaration func getSpaceId() -> Int? Parameter (none) Return Integer getThreadId Get the threadId Declaration func getThreadId() -> Int? Parameter (none) Return Integer getCreator Get the creator Declaration func getCreator() -> Member? Parameter (none) Return Member getModifier Get the modifier Declaration func getModifier() -> Member? Parameter (none) Return Member getCreatedAt Get the createdAt Declaration func getCreadtedAt() -> String? Parameter (none) Return String getModifiedAt Get the modifiedAt Declaration func getModifiedAt() -> String? Parameter (none) Return String Reference Get App Get Apps Get Form fields Get Form Layout","title":"App"},{"location":"reference/model/app/app/app-model/#appmodel","text":"Gets the basic information about the app. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"AppModel"},{"location":"reference/model/app/app/app-model/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/app/app-model/#parameter","text":"(none)","title":"Parameter"},{"location":"reference/model/app/app/app-model/#methods","text":"","title":"Methods"},{"location":"reference/model/app/app/app-model/#getappid","text":"Get the appId Declaration func getAppId() -> Int? Parameter (none) Return Integer","title":"getAppId"},{"location":"reference/model/app/app/app-model/#getcode","text":"Get the code Declaration func getCode() -> String? Parameter (none) Return String","title":"getCode"},{"location":"reference/model/app/app/app-model/#getname","text":"Get the name Declaration func getName() -> String? Parameter (none) Return String","title":"getName"},{"location":"reference/model/app/app/app-model/#getdescription","text":"Get the description Declaration func getDescription() -> String? Parameter (none) Return String","title":"getDescription"},{"location":"reference/model/app/app/app-model/#getspaceid","text":"Get the spaceId Declaration func getSpaceId() -> Int? Parameter (none) Return Integer","title":"getSpaceId"},{"location":"reference/model/app/app/app-model/#getthreadid","text":"Get the threadId Declaration func getThreadId() -> Int? Parameter (none) Return Integer","title":"getThreadId"},{"location":"reference/model/app/app/app-model/#getcreator","text":"Get the creator Declaration func getCreator() -> Member? Parameter (none) Return Member","title":"getCreator"},{"location":"reference/model/app/app/app-model/#getmodifier","text":"Get the modifier Declaration func getModifier() -> Member? Parameter (none) Return Member","title":"getModifier"},{"location":"reference/model/app/app/app-model/#getcreatedat","text":"Get the createdAt Declaration func getCreadtedAt() -> String? Parameter (none) Return String","title":"getCreatedAt"},{"location":"reference/model/app/app/app-model/#getmodifiedat","text":"Get the modifiedAt Declaration func getModifiedAt() -> String? Parameter (none) Return String","title":"getModifiedAt"},{"location":"reference/model/app/app/app-model/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/app/get-app-deploy-status-response/","text":"GetAppDeployStatusResponse The response of the app deploy status. Methods getApps Get information of the deploy statuses of multiple app Declaration func getApps() -> Array<AppDeployStatus>? Parameter (none) Return Array< AppDeployStatus >","title":"GetAppDeployStatusResponse"},{"location":"reference/model/app/app/get-app-deploy-status-response/#getappdeploystatusresponse","text":"The response of the app deploy status.","title":"GetAppDeployStatusResponse"},{"location":"reference/model/app/app/get-app-deploy-status-response/#methods","text":"","title":"Methods"},{"location":"reference/model/app/app/get-app-deploy-status-response/#getapps","text":"Get information of the deploy statuses of multiple app Declaration func getApps() -> Array<AppDeployStatus>? Parameter (none) Return Array< AppDeployStatus >","title":"getApps"},{"location":"reference/model/app/app/preview-app/","text":"PreviewApp The preview app. Constructor Parameter Name Type Description app Integer The appId revision The revision of the preview app Methods getApp Get the appId Declaration func getApp() -> Int? Parameter (none) Return Integer getRevision The revision of the preview app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"PreviewApp"},{"location":"reference/model/app/app/preview-app/#previewapp","text":"The preview app.","title":"PreviewApp"},{"location":"reference/model/app/app/preview-app/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/app/preview-app/#parameter","text":"Name Type Description app Integer The appId revision The revision of the preview app","title":"Parameter"},{"location":"reference/model/app/app/preview-app/#methods","text":"","title":"Methods"},{"location":"reference/model/app/app/preview-app/#getapp","text":"Get the appId Declaration func getApp() -> Int? Parameter (none) Return Integer","title":"getApp"},{"location":"reference/model/app/app/preview-app/#getrevision","text":"The revision of the preview app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/app/form/form-fields-related_record/","text":"Related Record Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. RelatedApp Methods getApp Get the app Declaration func getApp() -> Int? Parameter (none) Return String Sample code get App Source code String app = relatedApp.getApp(); getCode Get the code Declaration func getCode() -> String Parameter (none) Return String Sample code get Code Source code String app = relatedApp.getCode(); ReferenceTable Methods getCondition Get the condition Declaration func getCondition() -> FieldMapping? Parameter (none) Return FieldMapping Sample code get Condition Source code FieldMapping condition = referenceTable.getCondition(); getFilterCond Get the filterCond Declaration func getFilterCond() -> String? Parameter (none) Return String Sample code get FilterCond Source code String filterCond = referenceTable.getFilterCond(); getRelatedApp Get the relatedApp Declaration func getRelatedApp() -> RelatedApp? Parameter (none) Return RelatedApp Sample code get Related App Source code RelatedApp relatedApp = referenceTable.getRelatedApp(); getSize Get the size Declaration func getSize() -> Int? Parameter (none) Return Integer Sample code get Size Source code Integer size = referenceTable.getSize(); getDisplayFields Get the displayFields Declaration func getDisplayFields() -> [String]? Parameter (none) Return List<String> Sample code get Display Fields Source code List displayFields = referenceTable.getDisplayFields(); getSort Get the sort Declaration func getSort() -> String? Parameter (none) Return String Sample code get Sort Source code String sort = referenceTable.getSort(); RelatedRecordsField Warning extend the abstract class \" Field \" Methods getLabel Get the label Declaration func getLabel() -> String? Parameter (none) Return String Sample code get Label Source code String label = relatedRecordsField.getLabel(); getNoLabel Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean Sample code get NoLabel Source code Boolean noLabel = relatedRecordsField.getNoLabel(); getReferenceTable Get the referenceTable Declaration func getReferenceTable() -> ReferenceTable? Parameter (none) Return ReferenceTable Sample code get Reference Table Source code ReferenceTable referenceTable = relatedRecordsField.getReferenceTable(); Reference Get App Get Apps Get Form fields Get Form Layout","title":"Related Record"},{"location":"reference/model/app/form/form-fields-related_record/#related-record","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Related Record"},{"location":"reference/model/app/form/form-fields-related_record/#relatedapp","text":"","title":"RelatedApp"},{"location":"reference/model/app/form/form-fields-related_record/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-related_record/#getapp","text":"Get the app Declaration func getApp() -> Int? Parameter (none) Return String Sample code get App Source code String app = relatedApp.getApp();","title":"getApp"},{"location":"reference/model/app/form/form-fields-related_record/#getcode","text":"Get the code Declaration func getCode() -> String Parameter (none) Return String Sample code get Code Source code String app = relatedApp.getCode();","title":"getCode"},{"location":"reference/model/app/form/form-fields-related_record/#referencetable","text":"","title":"ReferenceTable"},{"location":"reference/model/app/form/form-fields-related_record/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-related_record/#getcondition","text":"Get the condition Declaration func getCondition() -> FieldMapping? Parameter (none) Return FieldMapping Sample code get Condition Source code FieldMapping condition = referenceTable.getCondition();","title":"getCondition"},{"location":"reference/model/app/form/form-fields-related_record/#getfiltercond","text":"Get the filterCond Declaration func getFilterCond() -> String? Parameter (none) Return String Sample code get FilterCond Source code String filterCond = referenceTable.getFilterCond();","title":"getFilterCond"},{"location":"reference/model/app/form/form-fields-related_record/#getrelatedapp","text":"Get the relatedApp Declaration func getRelatedApp() -> RelatedApp? Parameter (none) Return RelatedApp Sample code get Related App Source code RelatedApp relatedApp = referenceTable.getRelatedApp();","title":"getRelatedApp"},{"location":"reference/model/app/form/form-fields-related_record/#getsize","text":"Get the size Declaration func getSize() -> Int? Parameter (none) Return Integer Sample code get Size Source code Integer size = referenceTable.getSize();","title":"getSize"},{"location":"reference/model/app/form/form-fields-related_record/#getdisplayfields","text":"Get the displayFields Declaration func getDisplayFields() -> [String]? Parameter (none) Return List<String> Sample code get Display Fields Source code List displayFields = referenceTable.getDisplayFields();","title":"getDisplayFields"},{"location":"reference/model/app/form/form-fields-related_record/#getsort","text":"Get the sort Declaration func getSort() -> String? Parameter (none) Return String Sample code get Sort Source code String sort = referenceTable.getSort();","title":"getSort"},{"location":"reference/model/app/form/form-fields-related_record/#relatedrecordsfield","text":"Warning extend the abstract class \" Field \"","title":"RelatedRecordsField"},{"location":"reference/model/app/form/form-fields-related_record/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-related_record/#getlabel","text":"Get the label Declaration func getLabel() -> String? Parameter (none) Return String Sample code get Label Source code String label = relatedRecordsField.getLabel();","title":"getLabel"},{"location":"reference/model/app/form/form-fields-related_record/#getnolabel","text":"Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean Sample code get NoLabel Source code Boolean noLabel = relatedRecordsField.getNoLabel();","title":"getNoLabel"},{"location":"reference/model/app/form/form-fields-related_record/#getreferencetable","text":"Get the referenceTable Declaration func getReferenceTable() -> ReferenceTable? Parameter (none) Return ReferenceTable Sample code get Reference Table Source code ReferenceTable referenceTable = relatedRecordsField.getReferenceTable();","title":"getReferenceTable"},{"location":"reference/model/app/form/form-fields-related_record/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/form-fields-system/","text":"System Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. AssigneeField Warning extend the abstract class \" AbstractProcessManagementField \" Methods (none) CategoryField Warning extend the abstract class \" AbstractSystemField \" Methods getEnabled Get the enabled Declaration func getEnabled() -> Bool? Parameter (none) Return Boolean Sample code get Enabled Source code Boolean enabled = categoryField.getEnabled(); CreatedTimeField Warning extend the abstract class \" AbstractSystemInfoField \" Methods (none) CreatorField Warning extend the abstract class \" AbstractSystemInfoField \" Methods (none) ModifierField Warning extend the abstract class \" AbstractSystemInfoField \" Methods (none) RecordNumberField Warning extend the abstract class \" AbstractSystemInfoField \" Methods (none) StatusField Warning extend the abstract class \" AbstractProcessManagementField \" Methods (none) UpdatedTimeField Warning extend the abstract class \" AbstractSystemInfoField \" Methods (none) AbstractSystemField Warning extend the abstract class \" Field \" This class is an abstract class. Methods getLabel Get the label Declaration func getLabel() -> String? Parameter (none) Return String AbstractProcessManagementField Warning extend the abstract class \" AbstractSystemField \" This class is an abstract class. Methods getEnabled Get the enabled Declaration func getEnabled() -> Bool? Parameter (none) Return Boolean AbstractSystemInfoField Warning extend the abstract class \" AbstractSystemField \" This class is an abstract class. Methods getNoLabel Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean Reference Get App Get Apps Get Form fields Get Form Layout","title":"System"},{"location":"reference/model/app/form/form-fields-system/#system","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"System"},{"location":"reference/model/app/form/form-fields-system/#assigneefield","text":"Warning extend the abstract class \" AbstractProcessManagementField \"","title":"AssigneeField"},{"location":"reference/model/app/form/form-fields-system/#methods","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#categoryfield","text":"Warning extend the abstract class \" AbstractSystemField \"","title":"CategoryField"},{"location":"reference/model/app/form/form-fields-system/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#getenabled","text":"Get the enabled Declaration func getEnabled() -> Bool? Parameter (none) Return Boolean Sample code get Enabled Source code Boolean enabled = categoryField.getEnabled();","title":"getEnabled"},{"location":"reference/model/app/form/form-fields-system/#createdtimefield","text":"Warning extend the abstract class \" AbstractSystemInfoField \"","title":"CreatedTimeField"},{"location":"reference/model/app/form/form-fields-system/#methods_2","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#creatorfield","text":"Warning extend the abstract class \" AbstractSystemInfoField \"","title":"CreatorField"},{"location":"reference/model/app/form/form-fields-system/#methods_3","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#modifierfield","text":"Warning extend the abstract class \" AbstractSystemInfoField \"","title":"ModifierField"},{"location":"reference/model/app/form/form-fields-system/#methods_4","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#recordnumberfield","text":"Warning extend the abstract class \" AbstractSystemInfoField \"","title":"RecordNumberField"},{"location":"reference/model/app/form/form-fields-system/#methods_5","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#statusfield","text":"Warning extend the abstract class \" AbstractProcessManagementField \"","title":"StatusField"},{"location":"reference/model/app/form/form-fields-system/#methods_6","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#updatedtimefield","text":"Warning extend the abstract class \" AbstractSystemInfoField \"","title":"UpdatedTimeField"},{"location":"reference/model/app/form/form-fields-system/#methods_7","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#abstractsystemfield","text":"Warning extend the abstract class \" Field \" This class is an abstract class.","title":"AbstractSystemField"},{"location":"reference/model/app/form/form-fields-system/#methods_8","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#getlabel","text":"Get the label Declaration func getLabel() -> String? Parameter (none) Return String","title":"getLabel"},{"location":"reference/model/app/form/form-fields-system/#abstractprocessmanagementfield","text":"Warning extend the abstract class \" AbstractSystemField \" This class is an abstract class.","title":"AbstractProcessManagementField"},{"location":"reference/model/app/form/form-fields-system/#methods_9","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#getenabled_1","text":"Get the enabled Declaration func getEnabled() -> Bool? Parameter (none) Return Boolean","title":"getEnabled"},{"location":"reference/model/app/form/form-fields-system/#abstractsysteminfofield","text":"Warning extend the abstract class \" AbstractSystemField \" This class is an abstract class.","title":"AbstractSystemInfoField"},{"location":"reference/model/app/form/form-fields-system/#methods_10","text":"","title":"Methods"},{"location":"reference/model/app/form/form-fields-system/#getnolabel","text":"Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean","title":"getNoLabel"},{"location":"reference/model/app/form/form-fields-system/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/field/form-fields/","text":"Form Fields Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. FormFields Methods getApp Get the app Declaration func getApp() -> Int? Parameter (none) Return Integer Sample code get App Source code Integer app = formfields.getApp(); getRevision Get the revision Declaration func getRevision() -> Int? Parameter (none) Return Integer Sample code get Revision Source code Integer revision = formfields.getRevision(); getProperties Get the properties Declaration func getProperties() -> [String: Field]? Parameter (none) Return Map<String, Field > Sample code get Properties Source code Map properties = formfields.getProperties(); FieldGroup Warning extend the abstract class \" Field \" Methods getLabel Get the label Declaration func getLabel() -> String? Parameter (none) Return String Sample code get Label Source code String label = fieldGroup.getLabel(); getNoLabel Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean Sample code get NoLabel Source code Boolean noLabel = fieldGroup.getNoLabel(); getOpenGroup Get the openGroup Declaration func getOpenGroup() -> Bool? Parameter (none) Return Boolean Sample code get OpenGroup Source code Boolean openGroup = fieldGroup.getOpenGroup(); FieldMapping Methods getField Get the field Declaration func getField() -> String? Parameter (none) Return String Sample code get Field Source code String field = fieldMapping.getField(); getRelatedFields Get the relatedFields Declaration func getRelatedFields() -> String? Parameter (none) Return String Sample code get Related Fields Source code String relatedFields = fieldMapping.getRelatedFields(); SubTableField Warning extend the abstract class \" Field \" Methods getFields Get the fields Declaration func getFields() -> [String: AbstractInputField] Parameter (none) Return Map<String, AbstractInputField > Sample code get Fields Source code Map fields = subTableField.getFields(); Field Warning This class is an abstract class. Methods getCode Get the code Declaration func getCode() -> String Parameter (none) Return String getType Get the type Declaration func getType() -> FieldType? Parameter (none) Return FieldType Reference Get App Get Apps Get Form fields Get Form Layout","title":"Form Fields"},{"location":"reference/model/app/form/field/form-fields/#form-fields","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Form Fields"},{"location":"reference/model/app/form/field/form-fields/#formfields","text":"","title":"FormFields"},{"location":"reference/model/app/form/field/form-fields/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/field/form-fields/#getapp","text":"Get the app Declaration func getApp() -> Int? Parameter (none) Return Integer Sample code get App Source code Integer app = formfields.getApp();","title":"getApp"},{"location":"reference/model/app/form/field/form-fields/#getrevision","text":"Get the revision Declaration func getRevision() -> Int? Parameter (none) Return Integer Sample code get Revision Source code Integer revision = formfields.getRevision();","title":"getRevision"},{"location":"reference/model/app/form/field/form-fields/#getproperties","text":"Get the properties Declaration func getProperties() -> [String: Field]? Parameter (none) Return Map<String, Field > Sample code get Properties Source code Map properties = formfields.getProperties();","title":"getProperties"},{"location":"reference/model/app/form/field/form-fields/#fieldgroup","text":"Warning extend the abstract class \" Field \"","title":"FieldGroup"},{"location":"reference/model/app/form/field/form-fields/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/field/form-fields/#getlabel","text":"Get the label Declaration func getLabel() -> String? Parameter (none) Return String Sample code get Label Source code String label = fieldGroup.getLabel();","title":"getLabel"},{"location":"reference/model/app/form/field/form-fields/#getnolabel","text":"Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean Sample code get NoLabel Source code Boolean noLabel = fieldGroup.getNoLabel();","title":"getNoLabel"},{"location":"reference/model/app/form/field/form-fields/#getopengroup","text":"Get the openGroup Declaration func getOpenGroup() -> Bool? Parameter (none) Return Boolean Sample code get OpenGroup Source code Boolean openGroup = fieldGroup.getOpenGroup();","title":"getOpenGroup"},{"location":"reference/model/app/form/field/form-fields/#fieldmapping","text":"","title":"FieldMapping"},{"location":"reference/model/app/form/field/form-fields/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/field/form-fields/#getfield","text":"Get the field Declaration func getField() -> String? Parameter (none) Return String Sample code get Field Source code String field = fieldMapping.getField();","title":"getField"},{"location":"reference/model/app/form/field/form-fields/#getrelatedfields","text":"Get the relatedFields Declaration func getRelatedFields() -> String? Parameter (none) Return String Sample code get Related Fields Source code String relatedFields = fieldMapping.getRelatedFields();","title":"getRelatedFields"},{"location":"reference/model/app/form/field/form-fields/#subtablefield","text":"Warning extend the abstract class \" Field \"","title":"SubTableField"},{"location":"reference/model/app/form/field/form-fields/#methods_3","text":"","title":"Methods"},{"location":"reference/model/app/form/field/form-fields/#getfields","text":"Get the fields Declaration func getFields() -> [String: AbstractInputField] Parameter (none) Return Map<String, AbstractInputField > Sample code get Fields Source code Map fields = subTableField.getFields();","title":"getFields"},{"location":"reference/model/app/form/field/form-fields/#field","text":"Warning This class is an abstract class.","title":"Field"},{"location":"reference/model/app/form/field/form-fields/#methods_4","text":"","title":"Methods"},{"location":"reference/model/app/form/field/form-fields/#getcode","text":"Get the code Declaration func getCode() -> String Parameter (none) Return String","title":"getCode"},{"location":"reference/model/app/form/field/form-fields/#gettype","text":"Get the type Declaration func getType() -> FieldType? Parameter (none) Return FieldType","title":"getType"},{"location":"reference/model/app/form/field/form-fields/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/","text":"Lookup Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. LookupField Warning extend the abstract class \" AbstractInputField \" Methods getLookup Get the lookup Declaration func getLookup() -> LookupItem? Parameter (none) Return LookupItem LookupItem Methods getFieldMapping Get the fieldMapping Declaration func getFieldMapping() -> [FieldMapping] Parameter (none) Return List< FieldMapping > getFilterCond Get the filterCond Declaration func getFilterCond() -> String? Parameter (none) Return String getLookupPickerFields Get the lookupPickerFields Declaration func getLookupPickerFields() -> [String] Parameter (none) Return List<String> getRelatedApp Get the relatedApp Declaration func getRelatedApp() -> RelatedApp? Parameter (none) Return RelatedApp getRelatedKeyField Get the relatedKeyField Declaration func getRelatedKeyField() -> String? Parameter (none) Return String getSort Get the sort Declaration func getSort() -> String? Parameter (none) Return String Reference Get App Get Apps Get Form fields Get Form Layout","title":"Lookup"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#lookup","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Lookup"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#lookupfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"LookupField"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getlookup","text":"Get the lookup Declaration func getLookup() -> LookupItem? Parameter (none) Return LookupItem","title":"getLookup"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#lookupitem","text":"","title":"LookupItem"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getfieldmapping","text":"Get the fieldMapping Declaration func getFieldMapping() -> [FieldMapping] Parameter (none) Return List< FieldMapping >","title":"getFieldMapping"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getfiltercond","text":"Get the filterCond Declaration func getFilterCond() -> String? Parameter (none) Return String","title":"getFilterCond"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getlookuppickerfields","text":"Get the lookupPickerFields Declaration func getLookupPickerFields() -> [String] Parameter (none) Return List<String>","title":"getLookupPickerFields"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getrelatedapp","text":"Get the relatedApp Declaration func getRelatedApp() -> RelatedApp? Parameter (none) Return RelatedApp","title":"getRelatedApp"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getrelatedkeyfield","text":"Get the relatedKeyField Declaration func getRelatedKeyField() -> String? Parameter (none) Return String","title":"getRelatedKeyField"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#getsort","text":"Get the sort Declaration func getSort() -> String? Parameter (none) Return String","title":"getSort"},{"location":"reference/model/app/form/field/input/form-fields-input-lookup/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/field/input/form-fields-input-member/","text":"Member Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. DepartmentSelectionField Warning extend the abstract class \" AbstractMemberSelectField \" Methods (none) GroupSelectionField Warning extend the abstract class \" AbstractMemberSelectField \" Methods (none) MemberSelectEntity Methods getCode Get the code Declaration func getCode() -> String? Parameter (none) Return String getType Get the type Declaration func getType() -> MemberSelectEntityType? Parameter (none) Return MemberSelectEntityType UserSelectionField Warning extend the abstract class \" AbstractMemberSelectField \" Methods (none) AbstractMemberSelectField Warning extend the abstract class \" AbstractInputField \" This class is an abstract class. Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> [MemberSelectEntity] Parameter (none) Return List< MemberSelectEntity > getEntites Get the entites Declaration func getEntites() -> [MemberSelectEntity] Parameter (none) Return List< MemberSelectEntity > Reference Get App Get Apps Get Form fields Get Form Layout","title":"Member"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#member","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Member"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#departmentselectionfield","text":"Warning extend the abstract class \" AbstractMemberSelectField \"","title":"DepartmentSelectionField"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#methods","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#groupselectionfield","text":"Warning extend the abstract class \" AbstractMemberSelectField \"","title":"GroupSelectionField"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#methods_1","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#memberselectentity","text":"","title":"MemberSelectEntity"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#getcode","text":"Get the code Declaration func getCode() -> String? Parameter (none) Return String","title":"getCode"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#gettype","text":"Get the type Declaration func getType() -> MemberSelectEntityType? Parameter (none) Return MemberSelectEntityType","title":"getType"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#userselectionfield","text":"Warning extend the abstract class \" AbstractMemberSelectField \"","title":"UserSelectionField"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#methods_3","text":"(none)","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#abstractmemberselectfield","text":"Warning extend the abstract class \" AbstractInputField \" This class is an abstract class.","title":"AbstractMemberSelectField"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#methods_4","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#getdefaultvalue","text":"Get the defaultValue Declaration func getDefaultValue() -> [MemberSelectEntity] Parameter (none) Return List< MemberSelectEntity >","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#getentites","text":"Get the entites Declaration func getEntites() -> [MemberSelectEntity] Parameter (none) Return List< MemberSelectEntity >","title":"getEntites"},{"location":"reference/model/app/form/field/input/form-fields-input-member/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/","text":"Selection Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. CheckboxField Warning extend the abstract class \" AbstractSelectionField \" Methods getAlign Get the align Declaration func getAlign() -> AlignLayout? Parameter (none) Return AlignLayout getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> [String]? Parameter (none) Return List<String> DropDownField Warning extend the abstract class \" AbstractSelectionField \" Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String MultipleSelectField Warning extend the abstract class \" AbstractSelectionField \" Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> [String]? Parameter (none) Return List<String> OptionData Methods getIndex Get the index Declaration func getIndex() -> Int Parameter (none) Return Integer getLabel Get the label Declaration func getLabel() -> String Parameter (none) Return String RadioButtonField Warning extend the abstract class \" AbstractSelectionField \" Methods getAlign Get the align Declaration func getAlign() -> AlignLayout? Parameter (none) Return AlignLayout getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String AbstractSelectionField Warning extend the abstract class \" AbstractInputField \" This class is an abstract class. Methods getOptions Get the options Declaration func getOptions() -> [String: OptionData] Parameter (none) Return Map<String, OptionData > Reference Get App Get Apps Get Form fields Get Form Layout","title":"Selection"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#selection","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Selection"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#checkboxfield","text":"Warning extend the abstract class \" AbstractSelectionField \"","title":"CheckboxField"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getalign","text":"Get the align Declaration func getAlign() -> AlignLayout? Parameter (none) Return AlignLayout","title":"getAlign"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getdefaultvalue","text":"Get the defaultValue Declaration func getDefaultValue() -> [String]? Parameter (none) Return List<String>","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#dropdownfield","text":"Warning extend the abstract class \" AbstractSelectionField \"","title":"DropDownField"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getdefaultvalue_1","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#multipleselectfield","text":"Warning extend the abstract class \" AbstractSelectionField \"","title":"MultipleSelectField"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getdefaultvalue_2","text":"Get the defaultValue Declaration func getDefaultValue() -> [String]? Parameter (none) Return List<String>","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#optiondata","text":"","title":"OptionData"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#methods_3","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getindex","text":"Get the index Declaration func getIndex() -> Int Parameter (none) Return Integer","title":"getIndex"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getlabel","text":"Get the label Declaration func getLabel() -> String Parameter (none) Return String","title":"getLabel"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#radiobuttonfield","text":"Warning extend the abstract class \" AbstractSelectionField \"","title":"RadioButtonField"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#methods_4","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getalign_1","text":"Get the align Declaration func getAlign() -> AlignLayout? Parameter (none) Return AlignLayout","title":"getAlign"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getdefaultvalue_3","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#abstractselectionfield","text":"Warning extend the abstract class \" AbstractInputField \" This class is an abstract class.","title":"AbstractSelectionField"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#methods_5","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#getoptions","text":"Get the options Declaration func getOptions() -> [String: OptionData] Parameter (none) Return Map<String, OptionData >","title":"getOptions"},{"location":"reference/model/app/form/field/input/form-fields-input-selection/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/field/input/form-fields-input-time/","text":"Time Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. DateField Warning extend the abstract class \" AbstractInputField \" Methods getUnique Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String getDefaultNowValue Get the defaultNowValue Declaration func getDefaultNowValue() -> Bool? Parameter (none) Return Boolean DateTimeField Warning extend the abstract class \" AbstractInputField \" Methods getUnique Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String getDefaultNowValue Get the defaultNowValue Declaration func getDefaultNowValue() -> Bool? Parameter (none) Return Boolean TimeField Warning extend the abstract class \" AbstractInputField \" Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String getDefaultNowValue Get the defaultNowValue Declaration func getDefaultNowValue() -> Bool? Parameter (none) Return Boolean Reference Get App Get Apps Get Form fields Get Form Layout","title":"Time"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#time","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Time"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#datefield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"DateField"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getunique","text":"Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean","title":"getUnique"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getdefaultvalue","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getdefaultnowvalue","text":"Get the defaultNowValue Declaration func getDefaultNowValue() -> Bool? Parameter (none) Return Boolean","title":"getDefaultNowValue"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#datetimefield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"DateTimeField"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getunique_1","text":"Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean","title":"getUnique"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getdefaultvalue_1","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getdefaultnowvalue_1","text":"Get the defaultNowValue Declaration func getDefaultNowValue() -> Bool? Parameter (none) Return Boolean","title":"getDefaultNowValue"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#timefield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"TimeField"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getdefaultvalue_2","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#getdefaultnowvalue_2","text":"Get the defaultNowValue Declaration func getDefaultNowValue() -> Bool? Parameter (none) Return Boolean","title":"getDefaultNowValue"},{"location":"reference/model/app/form/field/input/form-fields-input-time/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/field/input/form-fields-input/","text":"Input Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API. AttachmentField Warning extend the abstract class \" AbstractInputField \" Methods getThumbnailSize Get the thumbnailSize Declaration func getThumbnailSize() -> Int? Parameter (none) Return Integer CalculatedField Warning extend the abstract class \" AbstractInputField \" Methods getExpression Get the expression Declaration func getExpression() -> String? Parameter (none) Return String getHideExpression Get the hideExpression Declaration func getHideExpression() -> Bool? Parameter (none) Return Boolean getDisplayScale Get the displayScale Declaration func getDisplayScale() -> Int? Parameter (none) Return Integer getUnit Get the unit Declaration func getUnit() -> String? Parameter (none) Return String getUnitPosition Get the unitPosition Declaration func getUnitPosition() -> UnitPosition? Parameter (none) Return UnitPosition getFormat Get the format Declaration func getFormat() -> NumberFormat? Parameter (none) Return NumberFormat LinkField Warning extend the abstract class \" AbstractInputField \" Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String getUnique Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean getMaxLength Get the maxLength Declaration func getMaxLength() -> Int? Parameter (none) Return Integer getMinLength Get the minLength Declaration func getMinLength() -> Int? Parameter (none) Return Integer getProtocol Get the protocol Declaration func getProtocol() -> LinkProtocol? Parameter (none) Return LinkProtocol MultiLineTextField Warning extend the abstract class \" AbstractInputField \" Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String NumberField Warning extend the abstract class \" AbstractInputField \" Methods getDisplayScale Get the displayScale Declaration func getDisplayScale() -> Int? Parameter (none) Return Integer getUnit Get the unit Declaration func getUnit() -> String? Parameter (none) Return String getUnitPosition Get the unitPosition Declaration func getUnitPosition() -> UnitPosition? Parameter (none) Return UnitPosition getDigit Get the digit Declaration func getDigit() -> Bool? Parameter (none) Return Boolean getMaxValue Get the maxValue Declaration func getMaxValue() -> Int? Parameter (none) Return Integer getMinValue Get the minValue Declaration func getMinValue() -> Int? Parameter (none) Return Integer getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String getUnique Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean RichTextField Warning extend the abstract class \" AbstractInputField \" Methods getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String SingleLineTextField Warning extend the abstract class \" AbstractInputField \" Methods getMinLength Get the minLength Declaration func getMinLength() -> String? Parameter (none) Return Integer getMaxLength Get the maxLength Declaration func getMaxLength() -> String? Parameter (none) Return Integer getExpression Get the expression Declaration func getExpression() -> String? Parameter (none) Return String getHideExpression Get the hideExpression Declaration func getHideExpression() -> Bool? Parameter (none) Return Boolean getDefaultValue Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String getUnique Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean AbstractInputField Warning extend the abstract class \" Field \" This class is an abstract class. Methods getLabel Get the label Declaration func getLabel() -> String? Parameter (none) Return String getNoLabel Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean getRequired Get the required Declaration func getRequired() -> Bool? Parameter (none) Return Boolean Reference Get App Get Apps Get Form fields Get Form Layout","title":"Input"},{"location":"reference/model/app/form/field/input/form-fields-input/#input","text":"Get a list of fields and their settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Input"},{"location":"reference/model/app/form/field/input/form-fields-input/#attachmentfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"AttachmentField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getthumbnailsize","text":"Get the thumbnailSize Declaration func getThumbnailSize() -> Int? Parameter (none) Return Integer","title":"getThumbnailSize"},{"location":"reference/model/app/form/field/input/form-fields-input/#calculatedfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"CalculatedField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getexpression","text":"Get the expression Declaration func getExpression() -> String? Parameter (none) Return String","title":"getExpression"},{"location":"reference/model/app/form/field/input/form-fields-input/#gethideexpression","text":"Get the hideExpression Declaration func getHideExpression() -> Bool? Parameter (none) Return Boolean","title":"getHideExpression"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdisplayscale","text":"Get the displayScale Declaration func getDisplayScale() -> Int? Parameter (none) Return Integer","title":"getDisplayScale"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunit","text":"Get the unit Declaration func getUnit() -> String? Parameter (none) Return String","title":"getUnit"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunitposition","text":"Get the unitPosition Declaration func getUnitPosition() -> UnitPosition? Parameter (none) Return UnitPosition","title":"getUnitPosition"},{"location":"reference/model/app/form/field/input/form-fields-input/#getformat","text":"Get the format Declaration func getFormat() -> NumberFormat? Parameter (none) Return NumberFormat","title":"getFormat"},{"location":"reference/model/app/form/field/input/form-fields-input/#linkfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"LinkField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdefaultvalue","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunique","text":"Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean","title":"getUnique"},{"location":"reference/model/app/form/field/input/form-fields-input/#getmaxlength","text":"Get the maxLength Declaration func getMaxLength() -> Int? Parameter (none) Return Integer","title":"getMaxLength"},{"location":"reference/model/app/form/field/input/form-fields-input/#getminlength","text":"Get the minLength Declaration func getMinLength() -> Int? Parameter (none) Return Integer","title":"getMinLength"},{"location":"reference/model/app/form/field/input/form-fields-input/#getprotocol","text":"Get the protocol Declaration func getProtocol() -> LinkProtocol? Parameter (none) Return LinkProtocol","title":"getProtocol"},{"location":"reference/model/app/form/field/input/form-fields-input/#multilinetextfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"MultiLineTextField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_3","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdefaultvalue_1","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#numberfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"NumberField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_4","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdisplayscale_1","text":"Get the displayScale Declaration func getDisplayScale() -> Int? Parameter (none) Return Integer","title":"getDisplayScale"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunit_1","text":"Get the unit Declaration func getUnit() -> String? Parameter (none) Return String","title":"getUnit"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunitposition_1","text":"Get the unitPosition Declaration func getUnitPosition() -> UnitPosition? Parameter (none) Return UnitPosition","title":"getUnitPosition"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdigit","text":"Get the digit Declaration func getDigit() -> Bool? Parameter (none) Return Boolean","title":"getDigit"},{"location":"reference/model/app/form/field/input/form-fields-input/#getmaxvalue","text":"Get the maxValue Declaration func getMaxValue() -> Int? Parameter (none) Return Integer","title":"getMaxValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#getminvalue","text":"Get the minValue Declaration func getMinValue() -> Int? Parameter (none) Return Integer","title":"getMinValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdefaultvalue_2","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunique_1","text":"Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean","title":"getUnique"},{"location":"reference/model/app/form/field/input/form-fields-input/#richtextfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"RichTextField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_5","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdefaultvalue_3","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#singlelinetextfield","text":"Warning extend the abstract class \" AbstractInputField \"","title":"SingleLineTextField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_6","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getminlength_1","text":"Get the minLength Declaration func getMinLength() -> String? Parameter (none) Return Integer","title":"getMinLength"},{"location":"reference/model/app/form/field/input/form-fields-input/#getmaxlength_1","text":"Get the maxLength Declaration func getMaxLength() -> String? Parameter (none) Return Integer","title":"getMaxLength"},{"location":"reference/model/app/form/field/input/form-fields-input/#getexpression_1","text":"Get the expression Declaration func getExpression() -> String? Parameter (none) Return String","title":"getExpression"},{"location":"reference/model/app/form/field/input/form-fields-input/#gethideexpression_1","text":"Get the hideExpression Declaration func getHideExpression() -> Bool? Parameter (none) Return Boolean","title":"getHideExpression"},{"location":"reference/model/app/form/field/input/form-fields-input/#getdefaultvalue_4","text":"Get the defaultValue Declaration func getDefaultValue() -> String? Parameter (none) Return String","title":"getDefaultValue"},{"location":"reference/model/app/form/field/input/form-fields-input/#getunique_2","text":"Get the unique Declaration func getUnique() -> Bool? Parameter (none) Return Boolean","title":"getUnique"},{"location":"reference/model/app/form/field/input/form-fields-input/#abstractinputfield","text":"Warning extend the abstract class \" Field \" This class is an abstract class.","title":"AbstractInputField"},{"location":"reference/model/app/form/field/input/form-fields-input/#methods_7","text":"","title":"Methods"},{"location":"reference/model/app/form/field/input/form-fields-input/#getlabel","text":"Get the label Declaration func getLabel() -> String? Parameter (none) Return String","title":"getLabel"},{"location":"reference/model/app/form/field/input/form-fields-input/#getnolabel","text":"Get the noLabel Declaration func getNoLabel() -> Bool? Parameter (none) Return Boolean","title":"getNoLabel"},{"location":"reference/model/app/form/field/input/form-fields-input/#getrequired","text":"Get the required Declaration func getRequired() -> Bool? Parameter (none) Return Boolean","title":"getRequired"},{"location":"reference/model/app/form/field/input/form-fields-input/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/form/layout/form-layout/","text":"Form Layout Get the layout of a form. Length and width of the field, The fields you set on the table and their order, Put fields in the Group field and their layout, label, space, and border settings. Permissions to view the App is needed. API Tokens cannot be used with this API. FormLayout Methods getRevision Get the revision Declaration func getRevision() -> String? Parameter (none) Return String getLayout Get the layout Declaration func getLayout() -> [ItemLayout]? Parameter (none) Return List< ItemLayout > FieldLayout Methods getType Get the type Declaration func getType() -> String? Parameter (none) Return String getCode Get the code Declaration func getCode() -> String? Parameter (none) Return String getElementId Get the elementId Declaration func getElementId() -> String? Parameter (none) Return String getLabel Get the label Declaration func getLabel() -> String? Parameter (none) Return String getSize Get the size Declaration func getSize() -> FieldSize? Parameter (none) Return FieldSize FieldSize Methods getWidth Get the width Declaration func getWidth() -> String? Parameter (none) Return String getHeight Get the height Declaration func getHeight() -> String? Parameter (none) Return String getInnerHeight Get the innerHeight Declaration func getInnerHeight() -> String? Parameter (none) Return String GroupLayout Warning extend the abstract class \" ItemLayout \" Methods getCode Get the code Declaration func getCode() -> String? Parameter (none) Return String getLayout Get the layout Declaration func getLayout() -> [RowLayout]? Parameter (none) Return List< RowLayout > RowLayout Warning extend the abstract class \" ItemLayout \" Methods getFields Get the fields Declaration func getFields() -> [FieldLayout]? Parameter (none) Return List< FieldLayout > SubTableLayout Warning extend the abstract class \" ItemLayout \" Methods getCode Get the code Declaration func getCode() -> String? Parameter (none) Return String ItemLayout Warning This class is an abstract class. Methods getType Get the type Declaration func getType() -> LayoutType? Parameter (none) Return LayoutType Reference Get App Get Apps Get Form fields Get Form Layout","title":"Layout"},{"location":"reference/model/app/form/layout/form-layout/#form-layout","text":"Get the layout of a form. Length and width of the field, The fields you set on the table and their order, Put fields in the Group field and their layout, label, space, and border settings. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"Form Layout"},{"location":"reference/model/app/form/layout/form-layout/#formlayout","text":"","title":"FormLayout"},{"location":"reference/model/app/form/layout/form-layout/#methods","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#getrevision","text":"Get the revision Declaration func getRevision() -> String? Parameter (none) Return String","title":"getRevision"},{"location":"reference/model/app/form/layout/form-layout/#getlayout","text":"Get the layout Declaration func getLayout() -> [ItemLayout]? Parameter (none) Return List< ItemLayout >","title":"getLayout"},{"location":"reference/model/app/form/layout/form-layout/#fieldlayout","text":"","title":"FieldLayout"},{"location":"reference/model/app/form/layout/form-layout/#methods_1","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#gettype","text":"Get the type Declaration func getType() -> String? Parameter (none) Return String","title":"getType"},{"location":"reference/model/app/form/layout/form-layout/#getcode","text":"Get the code Declaration func getCode() -> String? Parameter (none) Return String","title":"getCode"},{"location":"reference/model/app/form/layout/form-layout/#getelementid","text":"Get the elementId Declaration func getElementId() -> String? Parameter (none) Return String","title":"getElementId"},{"location":"reference/model/app/form/layout/form-layout/#getlabel","text":"Get the label Declaration func getLabel() -> String? Parameter (none) Return String","title":"getLabel"},{"location":"reference/model/app/form/layout/form-layout/#getsize","text":"Get the size Declaration func getSize() -> FieldSize? Parameter (none) Return FieldSize","title":"getSize"},{"location":"reference/model/app/form/layout/form-layout/#fieldsize","text":"","title":"FieldSize"},{"location":"reference/model/app/form/layout/form-layout/#methods_2","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#getwidth","text":"Get the width Declaration func getWidth() -> String? Parameter (none) Return String","title":"getWidth"},{"location":"reference/model/app/form/layout/form-layout/#getheight","text":"Get the height Declaration func getHeight() -> String? Parameter (none) Return String","title":"getHeight"},{"location":"reference/model/app/form/layout/form-layout/#getinnerheight","text":"Get the innerHeight Declaration func getInnerHeight() -> String? Parameter (none) Return String","title":"getInnerHeight"},{"location":"reference/model/app/form/layout/form-layout/#grouplayout","text":"Warning extend the abstract class \" ItemLayout \"","title":"GroupLayout"},{"location":"reference/model/app/form/layout/form-layout/#methods_3","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#getcode_1","text":"Get the code Declaration func getCode() -> String? Parameter (none) Return String","title":"getCode"},{"location":"reference/model/app/form/layout/form-layout/#getlayout_1","text":"Get the layout Declaration func getLayout() -> [RowLayout]? Parameter (none) Return List< RowLayout >","title":"getLayout"},{"location":"reference/model/app/form/layout/form-layout/#rowlayout","text":"Warning extend the abstract class \" ItemLayout \"","title":"RowLayout"},{"location":"reference/model/app/form/layout/form-layout/#methods_4","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#getfields","text":"Get the fields Declaration func getFields() -> [FieldLayout]? Parameter (none) Return List< FieldLayout >","title":"getFields"},{"location":"reference/model/app/form/layout/form-layout/#subtablelayout","text":"Warning extend the abstract class \" ItemLayout \"","title":"SubTableLayout"},{"location":"reference/model/app/form/layout/form-layout/#methods_5","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#getcode_2","text":"Get the code Declaration func getCode() -> String? Parameter (none) Return String","title":"getCode"},{"location":"reference/model/app/form/layout/form-layout/#itemlayout","text":"Warning This class is an abstract class.","title":"ItemLayout"},{"location":"reference/model/app/form/layout/form-layout/#methods_6","text":"","title":"Methods"},{"location":"reference/model/app/form/layout/form-layout/#gettype_1","text":"Get the type Declaration func getType() -> LayoutType? Parameter (none) Return LayoutType","title":"getType"},{"location":"reference/model/app/form/layout/form-layout/#reference","text":"Get App Get Apps Get Form fields Get Form Layout","title":"Reference"},{"location":"reference/model/app/general/general-settings/","text":"GeneralSettings The general settings of app Methods getName The name of the app. Declaration func getName() -> String? Parameter (none) Return String getDescription The description of an app Declaration func getDescription() -> String? Parameter (none) Return String getIcon Get the Icon of an app. Declaration func getIcon() -> Icon? Parameter (none) Return Icon getTheme Get the theme of an app. Declaration func getTheme() -> IconTheme? Parameter (none) Return IconTheme getRevision Get the revision of an app. Declaration func getRevision() -> Int? Parameter (none) Return Integer Enum IconTheme Name Type Value WHITE String WHITE RED String RED BLUE String BLUE GREEN String GREEN YELLOW String YELLOW BLACK String BLACK","title":"General"},{"location":"reference/model/app/general/general-settings/#generalsettings","text":"The general settings of app","title":"GeneralSettings"},{"location":"reference/model/app/general/general-settings/#methods","text":"","title":"Methods"},{"location":"reference/model/app/general/general-settings/#getname","text":"The name of the app. Declaration func getName() -> String? Parameter (none) Return String","title":"getName"},{"location":"reference/model/app/general/general-settings/#getdescription","text":"The description of an app Declaration func getDescription() -> String? Parameter (none) Return String","title":"getDescription"},{"location":"reference/model/app/general/general-settings/#geticon","text":"Get the Icon of an app. Declaration func getIcon() -> Icon? Parameter (none) Return Icon","title":"getIcon"},{"location":"reference/model/app/general/general-settings/#gettheme","text":"Get the theme of an app. Declaration func getTheme() -> IconTheme? Parameter (none) Return IconTheme","title":"getTheme"},{"location":"reference/model/app/general/general-settings/#getrevision","text":"Get the revision of an app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/app/general/general-settings/#enum","text":"","title":"Enum"},{"location":"reference/model/app/general/general-settings/#icontheme","text":"Name Type Value WHITE String WHITE RED String RED BLUE String BLUE GREEN String GREEN YELLOW String YELLOW BLACK String BLACK","title":"IconTheme"},{"location":"reference/model/app/general/icon-model/","text":"Icon The Icom of an apps. Constructor Parameter Name Type Description key String The key of the Icon iconType IconType The icon type of the Icon file FileModel The file of the Icon Methods getFile The file of the Icon Declaration func getFile() -> FileModel? Parameter (none) Return FileModel getKey The key of the Icon Declaration func getKey() -> String? Parameter (none) Return String getIconType The icon type of the Icon Declaration func getIconType() -> IconType? Parameter (none) Return IconType Enum IconType Name Type Value FILE String FILE PRESET String PRESET","title":"Icon"},{"location":"reference/model/app/general/icon-model/#icon","text":"The Icom of an apps.","title":"Icon"},{"location":"reference/model/app/general/icon-model/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/general/icon-model/#parameter","text":"Name Type Description key String The key of the Icon iconType IconType The icon type of the Icon file FileModel The file of the Icon","title":"Parameter"},{"location":"reference/model/app/general/icon-model/#methods","text":"","title":"Methods"},{"location":"reference/model/app/general/icon-model/#getfile","text":"The file of the Icon Declaration func getFile() -> FileModel? Parameter (none) Return FileModel","title":"getFile"},{"location":"reference/model/app/general/icon-model/#getkey","text":"The key of the Icon Declaration func getKey() -> String? Parameter (none) Return String","title":"getKey"},{"location":"reference/model/app/general/icon-model/#geticontype","text":"The icon type of the Icon Declaration func getIconType() -> IconType? Parameter (none) Return IconType","title":"getIconType"},{"location":"reference/model/app/general/icon-model/#enum","text":"","title":"Enum"},{"location":"reference/model/app/general/icon-model/#icontype","text":"Name Type Value FILE String FILE PRESET String PRESET","title":"IconType"},{"location":"reference/model/app/view/get-view-response/","text":"GetViewsResponse The views of an apps. Constructor Parameter Name Type Description views [String: ViewModel ] The appId revision The revision of the preview app Methods getViews Get the views of an app. Declaration func getViews() -> [String: ViewModel]? Parameter (none) Return [String: ViewModel ] getRevision The revision of the preview app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"GetViewsResponse"},{"location":"reference/model/app/view/get-view-response/#getviewsresponse","text":"The views of an apps.","title":"GetViewsResponse"},{"location":"reference/model/app/view/get-view-response/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/view/get-view-response/#parameter","text":"Name Type Description views [String: ViewModel ] The appId revision The revision of the preview app","title":"Parameter"},{"location":"reference/model/app/view/get-view-response/#methods","text":"","title":"Methods"},{"location":"reference/model/app/view/get-view-response/#getviews","text":"Get the views of an app. Declaration func getViews() -> [String: ViewModel]? Parameter (none) Return [String: ViewModel ]","title":"getViews"},{"location":"reference/model/app/view/get-view-response/#getrevision","text":"The revision of the preview app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/app/view/update-views-response/","text":"UpdateViewsResponse The views of an apps. Constructor Parameter Name Type Description views [String: ViewModel ] The appId revision The revision of the preview app Methods getViews Get the views of an app. Declaration func getViews() -> [String: ViewModel]? Parameter (none) Return [String: ViewModel ] getRevision The revision of the preview app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"UpdateViewsResponse"},{"location":"reference/model/app/view/update-views-response/#updateviewsresponse","text":"The views of an apps.","title":"UpdateViewsResponse"},{"location":"reference/model/app/view/update-views-response/#constructor","text":"","title":"Constructor"},{"location":"reference/model/app/view/update-views-response/#parameter","text":"Name Type Description views [String: ViewModel ] The appId revision The revision of the preview app","title":"Parameter"},{"location":"reference/model/app/view/update-views-response/#methods","text":"","title":"Methods"},{"location":"reference/model/app/view/update-views-response/#getviews","text":"Get the views of an app. Declaration func getViews() -> [String: ViewModel]? Parameter (none) Return [String: ViewModel ]","title":"getViews"},{"location":"reference/model/app/view/update-views-response/#getrevision","text":"The revision of the preview app. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/app/view/view-model/","text":"ViewModel General information of the member(user/group/organization) on the kintone application Methods getBuiltinType Get the code of the user/group/organization Declaration func getBuiltinType() -> BuiltinType? Parameter (none) Return BuiltinType setCode() The BuiltinType of the built-in View. Parameter None Return BuiltinType getDate The field code set for the Date Field. Responded for Calendar Views. Declaration func getDate() -> String? Return String getFields The list of field codes for the fields displayed in the View. Responded for List Views. Declaration func getFields() -> [String]? Parameter None Return [String] getFilterCond The filter condition as a query. Declaration func getFilterCond() -> String? Return String getHtml The HTML code set for the View. Responded for Custom Views. Declaration func getHtml() -> String? Parameter None Return String getId The View ID. Declaration func getId() -> Int? Parameter None Return Integer getIndex The display order (ascending) of the View, when listed with other views. Declaration func getIndex() -> Int? Parameter None Return Integer getName The name of the View. Declaration func getName() -> String? Parameter None Return String getPager The pagination settings. Responded for Custom Views. Declaration func getPager() -> Bool? Parameter None Return Boolean getSort The sort order as a query. Declaration func getSort() -> String? Parameter None Return String getTitle The field code set for the Title Field. Responded for Calendar Views. Declaration func getTitle() -> String? Parameter None Return String getType The type of View in Type Declaration func getType() -> ViewType? Parameter None Return Type Enum Type Name Type Value Description LIST String LIST List View CALENDAR String CALENDAR Custom View CUSTOM String CUSTOM Custom View BuiltinType Name Type Value Description ASSIGNEE String ASSIGNEE The \"Assigned to me\" View.(This list is automatically created if the Process Management settings have been enabled in the app.)","title":"View"},{"location":"reference/model/app/view/view-model/#viewmodel","text":"General information of the member(user/group/organization) on the kintone application","title":"ViewModel"},{"location":"reference/model/app/view/view-model/#methods","text":"","title":"Methods"},{"location":"reference/model/app/view/view-model/#getbuiltintype","text":"Get the code of the user/group/organization Declaration func getBuiltinType() -> BuiltinType? Parameter (none) Return BuiltinType","title":"getBuiltinType"},{"location":"reference/model/app/view/view-model/#setcode","text":"The BuiltinType of the built-in View. Parameter None Return BuiltinType","title":"setCode()"},{"location":"reference/model/app/view/view-model/#getdate","text":"The field code set for the Date Field. Responded for Calendar Views. Declaration func getDate() -> String? Return String","title":"getDate"},{"location":"reference/model/app/view/view-model/#getfields","text":"The list of field codes for the fields displayed in the View. Responded for List Views. Declaration func getFields() -> [String]? Parameter None Return [String]","title":"getFields"},{"location":"reference/model/app/view/view-model/#getfiltercond","text":"The filter condition as a query. Declaration func getFilterCond() -> String? Return String","title":"getFilterCond"},{"location":"reference/model/app/view/view-model/#gethtml","text":"The HTML code set for the View. Responded for Custom Views. Declaration func getHtml() -> String? Parameter None Return String","title":"getHtml"},{"location":"reference/model/app/view/view-model/#getid","text":"The View ID. Declaration func getId() -> Int? Parameter None Return Integer","title":"getId"},{"location":"reference/model/app/view/view-model/#getindex","text":"The display order (ascending) of the View, when listed with other views. Declaration func getIndex() -> Int? Parameter None Return Integer","title":"getIndex"},{"location":"reference/model/app/view/view-model/#getname","text":"The name of the View. Declaration func getName() -> String? Parameter None Return String","title":"getName"},{"location":"reference/model/app/view/view-model/#getpager","text":"The pagination settings. Responded for Custom Views. Declaration func getPager() -> Bool? Parameter None Return Boolean","title":"getPager"},{"location":"reference/model/app/view/view-model/#getsort","text":"The sort order as a query. Declaration func getSort() -> String? Parameter None Return String","title":"getSort"},{"location":"reference/model/app/view/view-model/#gettitle","text":"The field code set for the Title Field. Responded for Calendar Views. Declaration func getTitle() -> String? Parameter None Return String","title":"getTitle"},{"location":"reference/model/app/view/view-model/#gettype","text":"The type of View in Type Declaration func getType() -> ViewType? Parameter None Return Type","title":"getType"},{"location":"reference/model/app/view/view-model/#enum","text":"","title":"Enum"},{"location":"reference/model/app/view/view-model/#type","text":"Name Type Value Description LIST String LIST List View CALENDAR String CALENDAR Custom View CUSTOM String CUSTOM Custom View","title":"Type"},{"location":"reference/model/app/view/view-model/#builtintype","text":"Name Type Value Description ASSIGNEE String ASSIGNEE The \"Assigned to me\" View.(This list is automatically created if the Process Management settings have been enabled in the app.)","title":"BuiltinType"},{"location":"reference/model/bulk-request/bulk-request-item/","text":"BulkRequestItem An item of the bulk request Constructor Parameter Name Type Description method String The API method name. api String The path of the API. payload Object The parameters to be passed onto the API.Contents and formats will change depending on the API.","title":"BulkRequestItem"},{"location":"reference/model/bulk-request/bulk-request-item/#bulkrequestitem","text":"An item of the bulk request","title":"BulkRequestItem"},{"location":"reference/model/bulk-request/bulk-request-item/#constructor","text":"Parameter Name Type Description method String The API method name. api String The path of the API. payload Object The parameters to be passed onto the API.Contents and formats will change depending on the API.","title":"Constructor"},{"location":"reference/model/bulk-request/bulk-request-model/","text":"BulkRequestModel Store a list of requests and responses for a bulk request. Constructor Parameter (none) Methods addRequest Declaration func addRequest(_ bulkRequestItem: BulkRequestItem) Parameter Name Type Description bulkRequestItem BulkRequestItem The BulkRequest Item. Return (none)","title":"BulkRequestModel"},{"location":"reference/model/bulk-request/bulk-request-model/#bulkrequestmodel","text":"Store a list of requests and responses for a bulk request.","title":"BulkRequestModel"},{"location":"reference/model/bulk-request/bulk-request-model/#constructor","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/bulk-request/bulk-request-model/#methods","text":"","title":"Methods"},{"location":"reference/model/bulk-request/bulk-request-model/#addrequest","text":"Declaration func addRequest(_ bulkRequestItem: BulkRequestItem) Parameter Name Type Description bulkRequestItem BulkRequestItem The BulkRequest Item. Return (none)","title":"addRequest"},{"location":"reference/model/bulk-request/bulk-request-response/","text":"BulkRequestResponse List response form bulk request Constructor Parameter (none) Methods getResults Declaration func getResults() -> Array<Any>? Parameter (none) Return ArrayList<Object>","title":"BulkRequestResponse"},{"location":"reference/model/bulk-request/bulk-request-response/#bulkrequestresponse","text":"List response form bulk request","title":"BulkRequestResponse"},{"location":"reference/model/bulk-request/bulk-request-response/#constructor","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/bulk-request/bulk-request-response/#methods","text":"","title":"Methods"},{"location":"reference/model/bulk-request/bulk-request-response/#getresults","text":"Declaration func getResults() -> Array<Any>? Parameter (none) Return ArrayList<Object>","title":"getResults"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/","text":"CreateRecordCursorResponse The response of the create record cursor. Constructor Declaration init(_ connection: Connection?) Parameter Name Description id The cursor ID. totalCount The total count of records that match the query conditions. Methods getId Get the cursor ID. Declaration func getId() -> String Parameter (none) Return String setId Set the cursor ID. Declaration func setId(_ id: String?) Parameter Name Description id The cursor ID. Return None getTotalCount Get the total count of records that match the query conditions. Declaration func getTotalCount() -> Int Parameter (none) Return Integer setTotalCount(totalCount: Int) Set the total count of records that match the query conditions. Declaration func setTotalCount(_ totalCount: Int?) Parameter Name Description totalCount The total count of records that match the query conditions. Return None","title":"CreateRecordCursorResponse"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#createrecordcursorresponse","text":"The response of the create record cursor.","title":"CreateRecordCursorResponse"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#constructor","text":"Declaration init(_ connection: Connection?)","title":"Constructor"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#parameter","text":"Name Description id The cursor ID. totalCount The total count of records that match the query conditions.","title":"Parameter"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#methods","text":"","title":"Methods"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#getid","text":"Get the cursor ID. Declaration func getId() -> String Parameter (none) Return String","title":"getId"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#setid","text":"Set the cursor ID. Declaration func setId(_ id: String?) Parameter Name Description id The cursor ID. Return None","title":"setId"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#gettotalcount","text":"Get the total count of records that match the query conditions. Declaration func getTotalCount() -> Int Parameter (none) Return Integer","title":"getTotalCount"},{"location":"reference/model/cursor/record-cursor/create-record-cursor-response/#settotalcounttotalcount-int","text":"Set the total count of records that match the query conditions. Declaration func setTotalCount(_ totalCount: Int?) Parameter Name Description totalCount The total count of records that match the query conditions. Return None","title":"setTotalCount(totalCount: Int)"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/","text":"GetRecordCursorResponse The response of the get records by cursor Constructor Declaration init(_ records: [[String:FieldValue]]?, _ next: Bool?) Parameter Name Type Description records [[String:FieldValue]] The array of records data next Bool Show if there's more records to get from kintone for cursor. Methods getRecords Get the records data. Declaration func getRecords()-> [[String:FieldValue]] Parameter (none) Return [[String:FieldValue]] setRecords Set the records data. Declaration func setRecords(_ records: [[String:[FieldValue]]?) Parameter Name Type Description records [[String:FieldValue]] The array of records data Return None getNext Show if there's more records to get from kintone for cursor. Declaration func getNext()-> Bool Parameter (none) Return Bool setNext Set the next param Declaration func setNext(_ next: Bool?) Parameter Name Type Description next Bool Show if there's more records to get from kintone for cursor. Return None","title":"GetRecordCursorResponse"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#getrecordcursorresponse","text":"The response of the get records by cursor","title":"GetRecordCursorResponse"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#constructor","text":"Declaration init(_ records: [[String:FieldValue]]?, _ next: Bool?)","title":"Constructor"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#parameter","text":"Name Type Description records [[String:FieldValue]] The array of records data next Bool Show if there's more records to get from kintone for cursor.","title":"Parameter"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#methods","text":"","title":"Methods"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#getrecords","text":"Get the records data. Declaration func getRecords()-> [[String:FieldValue]] Parameter (none) Return [[String:FieldValue]]","title":"getRecords"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#setrecords","text":"Set the records data. Declaration func setRecords(_ records: [[String:[FieldValue]]?) Parameter Name Type Description records [[String:FieldValue]] The array of records data Return None","title":"setRecords"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#getnext","text":"Show if there's more records to get from kintone for cursor. Declaration func getNext()-> Bool Parameter (none) Return Bool","title":"getNext"},{"location":"reference/model/cursor/record-cursor/get-record-cursor-response/#setnext","text":"Set the next param Declaration func setNext(_ next: Bool?) Parameter Name Type Description next Bool Show if there's more records to get from kintone for cursor. Return None","title":"setNext"},{"location":"reference/model/file/file-model/","text":"File Model Holds file information obtained from kintone. Methods getContentType Get the content type of the file. Declaration func getContentType() -> String? Parameter (none) Return String getFileKey Get the file key of the uploaded file. Declaration func getFileKey() -> String? Parameter (none) Return String getName Get the name of the uploaded file. Declaration func getName() -> String? Parameter (none) Return String getSize Get the size of the file. Declaration func getSize() -> String? Parameter (none) Return String","title":"File"},{"location":"reference/model/file/file-model/#file-model","text":"Holds file information obtained from kintone.","title":"File Model"},{"location":"reference/model/file/file-model/#methods","text":"","title":"Methods"},{"location":"reference/model/file/file-model/#getcontenttype","text":"Get the content type of the file. Declaration func getContentType() -> String? Parameter (none) Return String","title":"getContentType"},{"location":"reference/model/file/file-model/#getfilekey","text":"Get the file key of the uploaded file. Declaration func getFileKey() -> String? Parameter (none) Return String","title":"getFileKey"},{"location":"reference/model/file/file-model/#getname","text":"Get the name of the uploaded file. Declaration func getName() -> String? Parameter (none) Return String","title":"getName"},{"location":"reference/model/file/file-model/#getsize","text":"Get the size of the file. Declaration func getSize() -> String? Parameter (none) Return String","title":"getSize"},{"location":"reference/model/member/member/","text":"Member General information of the member(user/group/organization) on the kintone application Constructor Parameter Name Type Description code String The user/group/organization code. name String The user/group/organization name. Methods getCode Get the code of the user/group/organization Declaration func getCode() -> String? Parameter (none) Return String getName Get the name of the user/group/organization Declaration func getName() -> String? Parameter (none) Return String","title":"Member"},{"location":"reference/model/member/member/#member","text":"General information of the member(user/group/organization) on the kintone application","title":"Member"},{"location":"reference/model/member/member/#constructor","text":"Parameter Name Type Description code String The user/group/organization code. name String The user/group/organization name.","title":"Constructor"},{"location":"reference/model/member/member/#methods","text":"","title":"Methods"},{"location":"reference/model/member/member/#getcode","text":"Get the code of the user/group/organization Declaration func getCode() -> String? Parameter (none) Return String","title":"getCode"},{"location":"reference/model/member/member/#getname","text":"Get the name of the user/group/organization Declaration func getName() -> String? Parameter (none) Return String","title":"getName"},{"location":"reference/model/record/record-comment-model/","text":"Comment Model General comment structure of the record on kintone restAPI Comment Constructor Parameter (none) Methods getId Get the Comment ID. Declaration func getId() -> Int? Parameter (none) Return Integer Sample code get the Comment ID. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, offsset); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); Integer commentID = comment.getId(); getText Get the comment including the line feed codes. Declaration func getText() -> String? Parameter (none) Return String Sample code get the comment including the line feed codes. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); String commentText = comment.getText(); getCreatedAt Get the created date and time of the comment. Declaration func getCreatedAt() -> Date? Parameter (none) Return Date Sample code get the created date and time of the comment. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); Date commentCreatedAt = comment.getCreatedAt(); getCreator Get an object including information of the comment creator. Declaration func getCreator() -> Member? Parameter (none) Return Member Sample code get an object including information of the comment creator. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); Member commentCreator = comment.getCreator(); getMentions Get an array including information of mentioned users. Declaration func getMentions() -> [CommentMention]? Parameter (none) Return List< CommentMention > Sample code get an array including information of mentioned users. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); List commentMentions = comment.getMentions(); CommentContent Constructor Parameter (none) Methods setText set the comment including the line feed codes. Declaration func setText(_ text: String) Parameter Name type Description text String The comment including the line feed codes. Return (none) Sample code set the comment including the line feed codes. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment); setMentions Get an array including information of mentioned users. Declaration func setMentions(_ mentions: [CommentMention]?) Parameter Name type Description mentions List< CommentMention > An array including information of mentioned users. Return (none) Sample code get an array including information of mentioned users. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment); CommentMention Constructor Parameter (none) Methods getCode Get the code of the mentioned user, group or organization. Declaration func getCode() -> String? Parameter (none) Return String Sample code get the code of the mentioned user, group or organization. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); List commentMentions = comment.getMentions(); CommentMention mention = commentMentions.get(0); String mentionUserCode = mention.getCode(); setCode set the comment including the line feed codes. Declaration func setCode(_ code: String) Parameter Name type Description code String The code of the mentioned user, group or organization. Return (none) Sample code set the comment including the line feed codes. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment); getType Get the type of the mentioned user, group or organization. Declaration func getType() -> String? Parameter (none) Return String Sample code get the type of the mentioned user, group or organization. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; v GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, offsset); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); List commentMentions = comment.getMentions(); CommentMention mention = commentMentions.get(0); String mentionUserType= mention.getType(); setType Get an array including information of mentioned users. Declaration func setType(_ type: String) Parameter Name type Description type String The type of the mentioned user, group or organization. Return (none) Sample code get an array including information of mentioned users. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment); GetCommentsResponse Constructor Parameter (none) Methods getComments Get the comments List on a record. Declaration func getComments() -> [Comment]? Parameter (none) Return ArrayList< Comment > Sample code get the comments List on a record. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); getOlder Get information of older comments. Declaration func getOlder() -> Bool Parameter (none) Return Boolean Sample code get information of older comments. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); Boolean resultOlderFlg = response.getOlder(); getNewer Get information of newer comments. Declaration func getNewer() -> Bool Parameter (none) Return Boolean Sample code get information of newer comments. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); Boolean resultNewerFlg = response.getNewer(); AddCommentResponse Constructor Parameter (none) Methods getId Get the ID of comment which have just created. Declaration func getId() -> Int? Parameter (none) Return Integer Sample code get the ID of comment which have just created. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment); Integer resultId = response.getId();","title":"Comment"},{"location":"reference/model/record/record-comment-model/#comment-model","text":"General comment structure of the record on kintone restAPI","title":"Comment Model"},{"location":"reference/model/record/record-comment-model/#comment","text":"","title":"Comment"},{"location":"reference/model/record/record-comment-model/#constructor","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-comment-model/#methods","text":"","title":"Methods"},{"location":"reference/model/record/record-comment-model/#getid","text":"Get the Comment ID. Declaration func getId() -> Int? Parameter (none) Return Integer Sample code get the Comment ID. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, offsset); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); Integer commentID = comment.getId();","title":"getId"},{"location":"reference/model/record/record-comment-model/#gettext","text":"Get the comment including the line feed codes. Declaration func getText() -> String? Parameter (none) Return String Sample code get the comment including the line feed codes. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); String commentText = comment.getText();","title":"getText"},{"location":"reference/model/record/record-comment-model/#getcreatedat","text":"Get the created date and time of the comment. Declaration func getCreatedAt() -> Date? Parameter (none) Return Date Sample code get the created date and time of the comment. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); Date commentCreatedAt = comment.getCreatedAt();","title":"getCreatedAt"},{"location":"reference/model/record/record-comment-model/#getcreator","text":"Get an object including information of the comment creator. Declaration func getCreator() -> Member? Parameter (none) Return Member Sample code get an object including information of the comment creator. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); Member commentCreator = comment.getCreator();","title":"getCreator"},{"location":"reference/model/record/record-comment-model/#getmentions","text":"Get an array including information of mentioned users. Declaration func getMentions() -> [CommentMention]? Parameter (none) Return List< CommentMention > Sample code get an array including information of mentioned users. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); List commentMentions = comment.getMentions();","title":"getMentions"},{"location":"reference/model/record/record-comment-model/#commentcontent","text":"","title":"CommentContent"},{"location":"reference/model/record/record-comment-model/#constructor_1","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-comment-model/#methods_1","text":"","title":"Methods"},{"location":"reference/model/record/record-comment-model/#settext","text":"set the comment including the line feed codes. Declaration func setText(_ text: String) Parameter Name type Description text String The comment including the line feed codes. Return (none) Sample code set the comment including the line feed codes. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment);","title":"setText"},{"location":"reference/model/record/record-comment-model/#setmentions","text":"Get an array including information of mentioned users. Declaration func setMentions(_ mentions: [CommentMention]?) Parameter Name type Description mentions List< CommentMention > An array including information of mentioned users. Return (none) Sample code get an array including information of mentioned users. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment);","title":"setMentions"},{"location":"reference/model/record/record-comment-model/#commentmention","text":"","title":"CommentMention"},{"location":"reference/model/record/record-comment-model/#constructor_2","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-comment-model/#methods_2","text":"","title":"Methods"},{"location":"reference/model/record/record-comment-model/#getcode","text":"Get the code of the mentioned user, group or organization. Declaration func getCode() -> String? Parameter (none) Return String Sample code get the code of the mentioned user, group or organization. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); List commentMentions = comment.getMentions(); CommentMention mention = commentMentions.get(0); String mentionUserCode = mention.getCode();","title":"getCode"},{"location":"reference/model/record/record-comment-model/#setcode","text":"set the comment including the line feed codes. Declaration func setCode(_ code: String) Parameter Name type Description code String The code of the mentioned user, group or organization. Return (none) Sample code set the comment including the line feed codes. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment);","title":"setCode"},{"location":"reference/model/record/record-comment-model/#gettype","text":"Get the type of the mentioned user, group or organization. Declaration func getType() -> String? Parameter (none) Return String Sample code get the type of the mentioned user, group or organization. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; v GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, offsset); ArrayList resultComments = response.getComments(); Comment comment = resultComments.get(0); List commentMentions = comment.getMentions(); CommentMention mention = commentMentions.get(0); String mentionUserType= mention.getType();","title":"getType"},{"location":"reference/model/record/record-comment-model/#settype","text":"Get an array including information of mentioned users. Declaration func setType(_ type: String) Parameter Name type Description type String The type of the mentioned user, group or organization. Return (none) Sample code get an array including information of mentioned users. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment);","title":"setType"},{"location":"reference/model/record/record-comment-model/#getcommentsresponse","text":"","title":"GetCommentsResponse"},{"location":"reference/model/record/record-comment-model/#constructor_3","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-comment-model/#methods_3","text":"","title":"Methods"},{"location":"reference/model/record/record-comment-model/#getcomments","text":"Get the comments List on a record. Declaration func getComments() -> [Comment]? Parameter (none) Return ArrayList< Comment > Sample code get the comments List on a record. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); ArrayList resultComments = response.getComments();","title":"getComments"},{"location":"reference/model/record/record-comment-model/#getolder","text":"Get information of older comments. Declaration func getOlder() -> Bool Parameter (none) Return Boolean Sample code get information of older comments. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); Boolean resultOlderFlg = response.getOlder();","title":"getOlder"},{"location":"reference/model/record/record-comment-model/#getnewer","text":"Get information of newer comments. Declaration func getNewer() -> Bool Parameter (none) Return Boolean Sample code get information of newer comments. Source code // execute GET RECORD_COMMENTS API Integer appID = 1; Integer recordID = 1; String order = \"asc\"; Integer offsset = 1; Integer limit = 2; GetCommentsResponse response = kintoneRecordManager.getComments(appID, recordID, order, offsset, limit); Boolean resultNewerFlg = response.getNewer();","title":"getNewer"},{"location":"reference/model/record/record-comment-model/#addcommentresponse","text":"","title":"AddCommentResponse"},{"location":"reference/model/record/record-comment-model/#constructor_4","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-comment-model/#methods_4","text":"","title":"Methods"},{"location":"reference/model/record/record-comment-model/#getid_1","text":"Get the ID of comment which have just created. Declaration func getId() -> Int? Parameter (none) Return Integer Sample code get the ID of comment which have just created. Source code // execute ADD RECORD_COMMENT API Integer app = 1; Integer record = 1; CommentContent comment = new CommentContent(); ArrayList mentionList = new ArrayList (); CommentMention mention = new CommentMention(); mention.setCode(\"sample_user\"); mention.setType(\"USER\"); mentionList.add(mention); comment.setText(\"test comment\"); comment.setMentions(mentionList); AddCommentResponse response = kintoneRecordManager.addComment(app, record, comment); Integer resultId = response.getId();","title":"getId"},{"location":"reference/model/record/record-field-model/","text":"Field Model FieldValue General Field's value of the kintone app Constructor Parameter (none) Methods getType Get the type of field. Declaration func getType() -> FieldType? Parameter (none) Return FieldType setType Set the type of field. Declaration func setType(_ type: FieldType) Parameter Name type Description type FieldType The type of field - kintone-sdk FieldType constants. Return (none) getValue() Get the value of field in the record. Declaration func getValue() -> Any? Parameter (none) Return Object setValue Set the value of field in the record. Declaration setValue(_ value: Any?) Parameter Name type Description value Object The value of field in the record, read more at Field Type here . Return (none) SubTableValueItem Constructor Parameter (none) Methods getID Get the ID of item in table. Declaration func getID() -> Int? Parameter (none) Return Integer setID Set the ID of table. Declaration func setID(_ id: Int) Parameter Name type Description id Integer The ID of table . Return (none) getValue Get the value of field in the record. Declaration func getValue() -> [String:FieldValue]? Parameter (none) Return HashMap<String, FieldValue > setValue set the value of field in the record. Declaration func setValue(_ value: [String:FieldValue]) Parameter Name type Description value HashMap<String, FieldValue > The row data of table. Return (none)","title":"Field"},{"location":"reference/model/record/record-field-model/#field-model","text":"","title":"Field Model"},{"location":"reference/model/record/record-field-model/#fieldvalue","text":"General Field's value of the kintone app","title":"FieldValue"},{"location":"reference/model/record/record-field-model/#constructor","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-field-model/#methods","text":"","title":"Methods"},{"location":"reference/model/record/record-field-model/#gettype","text":"Get the type of field. Declaration func getType() -> FieldType? Parameter (none) Return FieldType","title":"getType"},{"location":"reference/model/record/record-field-model/#settype","text":"Set the type of field. Declaration func setType(_ type: FieldType) Parameter Name type Description type FieldType The type of field - kintone-sdk FieldType constants. Return (none)","title":"setType"},{"location":"reference/model/record/record-field-model/#getvalue","text":"Get the value of field in the record. Declaration func getValue() -> Any? Parameter (none) Return Object","title":"getValue()"},{"location":"reference/model/record/record-field-model/#setvalue","text":"Set the value of field in the record. Declaration setValue(_ value: Any?) Parameter Name type Description value Object The value of field in the record, read more at Field Type here . Return (none)","title":"setValue"},{"location":"reference/model/record/record-field-model/#subtablevalueitem","text":"","title":"SubTableValueItem"},{"location":"reference/model/record/record-field-model/#constructor_1","text":"Parameter (none)","title":"Constructor"},{"location":"reference/model/record/record-field-model/#methods_1","text":"","title":"Methods"},{"location":"reference/model/record/record-field-model/#getid","text":"Get the ID of item in table. Declaration func getID() -> Int? Parameter (none) Return Integer","title":"getID"},{"location":"reference/model/record/record-field-model/#setid","text":"Set the ID of table. Declaration func setID(_ id: Int) Parameter Name type Description id Integer The ID of table . Return (none)","title":"setID"},{"location":"reference/model/record/record-field-model/#getvalue_1","text":"Get the value of field in the record. Declaration func getValue() -> [String:FieldValue]? Parameter (none) Return HashMap<String, FieldValue >","title":"getValue"},{"location":"reference/model/record/record-field-model/#setvalue_1","text":"set the value of field in the record. Declaration func setValue(_ value: [String:FieldValue]) Parameter Name type Description value HashMap<String, FieldValue > The row data of table. Return (none)","title":"setValue"},{"location":"reference/model/record/record-model/","text":"Record Model General record response, using for data response from the kintone app GetRecordResponse Methods getRecord Get the Record data response. Declaration func getRecord() -> [String:FieldValue]? Parameter (none) Return HashMap<String, FieldValue > GetRecordsResponse Methods getRecords Get the Records data response. Declaration func getRecords() -> [[String:FieldValue]]? Parameter (none) Return ArrayList<HashMap<String, FieldValue >> getTotalCount Get the number of records response. Declaration func getTotalCount() -> Int? Parameter (none) Return Integer AddRecordResponse Methods getId Get the the ID of record added. Declaration func getId() -> Int? Parameter (none) Return Integer getRevision Get the revision number of record added. Declaration func getRevision() -> Int? Parameter (none) Return Integer AddRecordsResponse Methods getIDs Get the array of added records ID. Declaration func getIDs() -> [Int]? Parameter (none) Return ArrayList<Integer> getRevisions Get the array of added records revision number. Declaration func getRevisions() -> [Int]? Parameter (none) Return ArrayList<Integer> UpdateRecordResponse Methods getRevision Get the revision number of record updated. Declaration func getRevision() -> Int? Parameter (none) Return Integer UpdateRecordsResponse Methods getRecords Get the array of added records ID with revision. Declaration func getRecords() -> [RecordUpdateResponseItem]? Parameter (none) Return ArrayList< RecordUpdateResponseItem > RecordUpdateResponseItem Methods getID Get the the ID of record updated. Declaration func getID() -> Int? Parameter (none) Return Integer getRevision Get the revision number of record updated. Declaration func getRevision() -> Int? Parameter (none) Return Integer RecordUpdateItem Constructor Parameter Name type Description id Integer The ID of the record. revision Integer The revision number of the record. updateKey RecordUpdateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. record HashMap<String, FieldValue > The data to update record. Methods (none) RecordUpdateKey Constructor Parameter Name type Description field String The field code of unique key in the kintone app. value String The field value in the record. Methods (none) RecordUpdateStatusItem Constructor Parameter Name type Description action String The Action name of the action you want. assignee String (Optional) The next Assignee. Specify the Assignee's log in name.. id Integer The record ID. revision Integer (Optional) The revision number of the record before updating the status.If the specified revision is not the latest revision, the request will result in an error. Methods (none) RecordUpsertItem Constructor Declaration public init(_ updateKey: RecordUpdateKey?,_ record: [String:FieldValue]?) Parameter Name Description updateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. record The data to update record. Methods getRecord Get the Record data response. Declaration func getRecord() -> [String:FieldValue]? Parameter (none) Return HashMap<String, FieldValue > getRecord Get the Record data response by UpdateKey. Declaration func getRecord(_ updateKey: RecordUpdateKey?) -> [String:FieldValue]? Parameter Name Description updateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. Return HashMap<String, FieldValue > getUpdateKey Get the unique key of record. Declaration func getUpdateKey() -> RecordUpdateKey? Parameter (none) Return RecordUpdateKey setRecord Set the Record data response. Declaration func setRecord(_ record: [String:FieldValue]?) Parameter Name Description record The data to update record. Return (none) setUpdateKey Set the unique key of record. Declaration func setUpdateKey(_ updateKey: RecordUpdateKey?) Parameter Name Description updateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. Return (none)","title":"Record"},{"location":"reference/model/record/record-model/#record-model","text":"General record response, using for data response from the kintone app","title":"Record Model"},{"location":"reference/model/record/record-model/#getrecordresponse","text":"Methods","title":"GetRecordResponse"},{"location":"reference/model/record/record-model/#getrecord","text":"Get the Record data response. Declaration func getRecord() -> [String:FieldValue]? Parameter (none) Return HashMap<String, FieldValue >","title":"getRecord"},{"location":"reference/model/record/record-model/#getrecordsresponse","text":"Methods","title":"GetRecordsResponse"},{"location":"reference/model/record/record-model/#getrecords","text":"Get the Records data response. Declaration func getRecords() -> [[String:FieldValue]]? Parameter (none) Return ArrayList<HashMap<String, FieldValue >>","title":"getRecords"},{"location":"reference/model/record/record-model/#gettotalcount","text":"Get the number of records response. Declaration func getTotalCount() -> Int? Parameter (none) Return Integer","title":"getTotalCount"},{"location":"reference/model/record/record-model/#addrecordresponse","text":"Methods","title":"AddRecordResponse"},{"location":"reference/model/record/record-model/#getid","text":"Get the the ID of record added. Declaration func getId() -> Int? Parameter (none) Return Integer","title":"getId"},{"location":"reference/model/record/record-model/#getrevision","text":"Get the revision number of record added. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/record/record-model/#addrecordsresponse","text":"Methods","title":"AddRecordsResponse"},{"location":"reference/model/record/record-model/#getids","text":"Get the array of added records ID. Declaration func getIDs() -> [Int]? Parameter (none) Return ArrayList<Integer>","title":"getIDs"},{"location":"reference/model/record/record-model/#getrevisions","text":"Get the array of added records revision number. Declaration func getRevisions() -> [Int]? Parameter (none) Return ArrayList<Integer>","title":"getRevisions"},{"location":"reference/model/record/record-model/#updaterecordresponse","text":"Methods","title":"UpdateRecordResponse"},{"location":"reference/model/record/record-model/#getrevision_1","text":"Get the revision number of record updated. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/record/record-model/#updaterecordsresponse","text":"Methods","title":"UpdateRecordsResponse"},{"location":"reference/model/record/record-model/#getrecords_1","text":"Get the array of added records ID with revision. Declaration func getRecords() -> [RecordUpdateResponseItem]? Parameter (none) Return ArrayList< RecordUpdateResponseItem >","title":"getRecords"},{"location":"reference/model/record/record-model/#recordupdateresponseitem","text":"Methods","title":"RecordUpdateResponseItem"},{"location":"reference/model/record/record-model/#getid_1","text":"Get the the ID of record updated. Declaration func getID() -> Int? Parameter (none) Return Integer","title":"getID"},{"location":"reference/model/record/record-model/#getrevision_2","text":"Get the revision number of record updated. Declaration func getRevision() -> Int? Parameter (none) Return Integer","title":"getRevision"},{"location":"reference/model/record/record-model/#recordupdateitem","text":"","title":"RecordUpdateItem"},{"location":"reference/model/record/record-model/#constructor","text":"Parameter Name type Description id Integer The ID of the record. revision Integer The revision number of the record. updateKey RecordUpdateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. record HashMap<String, FieldValue > The data to update record. Methods (none)","title":"Constructor"},{"location":"reference/model/record/record-model/#recordupdatekey","text":"","title":"RecordUpdateKey"},{"location":"reference/model/record/record-model/#constructor_1","text":"Parameter Name type Description field String The field code of unique key in the kintone app. value String The field value in the record. Methods (none)","title":"Constructor"},{"location":"reference/model/record/record-model/#recordupdatestatusitem","text":"","title":"RecordUpdateStatusItem"},{"location":"reference/model/record/record-model/#constructor_2","text":"Parameter Name type Description action String The Action name of the action you want. assignee String (Optional) The next Assignee. Specify the Assignee's log in name.. id Integer The record ID. revision Integer (Optional) The revision number of the record before updating the status.If the specified revision is not the latest revision, the request will result in an error. Methods (none)","title":"Constructor"},{"location":"reference/model/record/record-model/#recordupsertitem","text":"","title":"RecordUpsertItem"},{"location":"reference/model/record/record-model/#constructor_3","text":"Declaration public init(_ updateKey: RecordUpdateKey?,_ record: [String:FieldValue]?) Parameter Name Description updateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. record The data to update record. Methods","title":"Constructor"},{"location":"reference/model/record/record-model/#getrecord_1","text":"Get the Record data response. Declaration func getRecord() -> [String:FieldValue]? Parameter (none) Return HashMap<String, FieldValue >","title":"getRecord"},{"location":"reference/model/record/record-model/#getrecord_2","text":"Get the Record data response by UpdateKey. Declaration func getRecord(_ updateKey: RecordUpdateKey?) -> [String:FieldValue]? Parameter Name Description updateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. Return HashMap<String, FieldValue >","title":"getRecord"},{"location":"reference/model/record/record-model/#getupdatekey","text":"Get the unique key of record. Declaration func getUpdateKey() -> RecordUpdateKey? Parameter (none) Return RecordUpdateKey","title":"getUpdateKey"},{"location":"reference/model/record/record-model/#setrecord","text":"Set the Record data response. Declaration func setRecord(_ record: [String:FieldValue]?) Parameter Name Description record The data to update record. Return (none)","title":"setRecord"},{"location":"reference/model/record/record-model/#setupdatekey","text":"Set the unique key of record. Declaration func setUpdateKey(_ updateKey: RecordUpdateKey?) Parameter Name Description updateKey The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on. Return (none)","title":"setUpdateKey"}]}